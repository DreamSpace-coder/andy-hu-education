[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workbook for Introductory SQL",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#what",
    "href": "index.html#what",
    "title": "Workbook for Introductory SQL",
    "section": "What",
    "text": "What\nThis workbook is designed for my students to learn basics of SQL using MySQL database as the database environment. Many data and examples used in this work are from Murach, J. (2023). Murach’s MySQL (4th Edition) and its accompanied resources.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#why",
    "href": "index.html#why",
    "title": "Workbook for Introductory SQL",
    "section": "Why",
    "text": "Why\nThroughout my various teaching experiences, especially at the beginner’s level, I noitced that students may find it awkward learning from a SQL terminal, database server workbench or PowerPoint slide deck lacks of interactivity between various SQL code chunks and their outputs. This workbook reduces the gap by introducing variours topics in highly precise terms and tight connection between the codes and their server outputs. Fundamentally, this work intends to help students navigate various SQL and database related topics more easily and friendly.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#how",
    "href": "index.html#how",
    "title": "Workbook for Introductory SQL",
    "section": "How",
    "text": "How\nThis workbook can be used both independently on its own or can be used closely with Murach’s MySQL (4th Edition). However, please keep in mind that this workbook introduces topics and database knowledge differently from the Murach’s MySQL (4th Edition).",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "MySQL_3_Retrieve_Data_from_Single_Table.html",
    "href": "MySQL_3_Retrieve_Data_from_Single_Table.html",
    "title": "1  Retrieve Data from Single Table",
    "section": "",
    "text": "1.1 Reference\nDefault database in this chapter is “ap”.\nOther databases included in the simulation MySQL server:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Retrieve Data from Single Table</span>"
    ]
  },
  {
    "objectID": "MySQL_3_Retrieve_Data_from_Single_Table.html#reference",
    "href": "MySQL_3_Retrieve_Data_from_Single_Table.html#reference",
    "title": "1  Retrieve Data from Single Table",
    "section": "",
    "text": "om\nex",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Retrieve Data from Single Table</span>"
    ]
  },
  {
    "objectID": "MySQL_3_Retrieve_Data_from_Single_Table.html#getting-started-select-and-from",
    "href": "MySQL_3_Retrieve_Data_from_Single_Table.html#getting-started-select-and-from",
    "title": "1  Retrieve Data from Single Table",
    "section": "1.2 Getting Started: SELECT and FROM",
    "text": "1.2 Getting Started: SELECT and FROM\nThe basic SQL query to get data from a table involving SELECT and FROM.\n“*“: indicates to select all columns from the table indicated by the FROM clause.\nTo point at a particular table it follows the following notion: [catalog/database].[schema].[table]. For this database (MySQL Configuring Catalog and Schema Support), it simplifies and reduces to [database].[table].\nThe following example allows to return all columns from table “invoices”, database “ap”.\n\nSELECT * \nFROM ap.invoices\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n1\n122\n989319-457\n2022-04-08\n3813.33\n3813.33\n0\n3\n2022-05-08\n2022-05-07\n\n\n2\n123\n263253241\n2022-04-10\n40.20\n40.20\n0\n3\n2022-05-10\n2022-05-14\n\n\n3\n123\n963253234\n2022-04-13\n138.75\n138.75\n0\n3\n2022-05-13\n2022-05-09\n\n\n4\n123\n2-000-2993\n2022-04-16\n144.70\n144.70\n0\n3\n2022-05-16\n2022-05-12\n\n\n5\n123\n963253251\n2022-04-16\n15.50\n15.50\n0\n3\n2022-05-16\n2022-05-11\n\n\n6\n123\n963253261\n2022-04-16\n42.75\n42.75\n0\n3\n2022-05-16\n2022-05-21\n\n\n7\n123\n963253237\n2022-04-21\n172.50\n172.50\n0\n3\n2022-05-21\n2022-05-22\n\n\n8\n89\n125520-1\n2022-04-24\n95.00\n95.00\n0\n1\n2022-05-04\n2022-05-01\n\n\n9\n121\n97/488\n2022-04-24\n601.95\n601.95\n0\n3\n2022-05-24\n2022-05-21\n\n\n10\n123\n263253250\n2022-04-24\n42.67\n42.67\n0\n3\n2022-05-24\n2022-05-22\n\n\n11\n123\n963253262\n2022-04-25\n42.50\n42.50\n0\n3\n2022-05-25\n2022-05-20\n\n\n12\n96\nI77271-O01\n2022-04-26\n662.00\n662.00\n0\n2\n2022-05-16\n2022-05-13\n\n\n13\n95\n111-92R-10096\n2022-04-30\n16.33\n16.33\n0\n2\n2022-05-20\n2022-05-23\n\n\n14\n115\n25022117\n2022-05-01\n6.00\n6.00\n0\n4\n2022-06-10\n2022-06-10\n\n\n15\n48\nP02-88D77S7\n2022-05-03\n856.92\n856.92\n0\n3\n2022-06-02\n2022-05-30\n\n\n\n\n\nIf you want to select particular columns just pass in particular column names after SELECT.\n\nCalculated Columns with SELECT\nMore tricks about SELECT will be introduced with the next several examples.\nIn the following example, note that you can also create calculated columns by directly doing math among the columns.\n\nIn addition AS keyword allows you to create an alias for that newly created column.\n\n\nSELECT invoice_id, invoice_total,\n       credit_total + payment_total AS total_credits\nFROM ap.invoices\n\n\nDisplaying records 1 - 15\n\n\ninvoice_id\ninvoice_total\ntotal_credits\n\n\n\n\n1\n3813.33\n3813.33\n\n\n2\n40.20\n40.20\n\n\n3\n138.75\n138.75\n\n\n4\n144.70\n144.70\n\n\n5\n15.50\n15.50\n\n\n6\n42.75\n42.75\n\n\n7\n172.50\n172.50\n\n\n8\n95.00\n95.00\n\n\n9\n601.95\n601.95\n\n\n10\n42.67\n42.67\n\n\n11\n42.50\n42.50\n\n\n12\n662.00\n662.00\n\n\n13\n16.33\n16.33\n\n\n14\n6.00\n6.00\n\n\n15\n856.92\n856.92\n\n\n\n\n\nDividing is a serious business in SQL. Look at the following division math.\n\nSELECT invoice_id, \n       invoice_id / 3 AS decimal_quotient,\n       invoice_id DIV 3 AS integer_quotient,\n       invoice_id % 3 AS remainder\nFROM ap.invoices\n\n\nDisplaying records 1 - 15\n\n\ninvoice_id\ndecimal_quotient\ninteger_quotient\nremainder\n\n\n\n\n114\n38.0000\n38\n0\n\n\n113\n37.6667\n37\n2\n\n\n112\n37.3333\n37\n1\n\n\n111\n37.0000\n37\n0\n\n\n110\n36.6667\n36\n2\n\n\n109\n36.3333\n36\n1\n\n\n105\n35.0000\n35\n0\n\n\n106\n35.3333\n35\n1\n\n\n107\n35.6667\n35\n2\n\n\n108\n36.0000\n36\n0\n\n\n102\n34.0000\n34\n0\n\n\n103\n34.3333\n34\n1\n\n\n104\n34.6667\n34\n2\n\n\n100\n33.3333\n33\n1\n\n\n101\n33.6667\n33\n2\n\n\n\n\n\n\n\nFind Distinct Value(s): SELECT DISTINCT\nIf you would like to see distinct values of different columns, add DISTINCT keyword after SELECT.\n\nSELECT DISTINCT vendor_city, vendor_state\nFROM ap.vendors\nORDER BY vendor_city\n\n\nDisplaying records 1 - 15\n\n\nvendor_city\nvendor_state\n\n\n\n\nAnaheim\nCA\n\n\nAnn Arbor\nMI\n\n\nAuburn Hills\nMI\n\n\nBoston\nMA\n\n\nBrea\nCA\n\n\nCarol Stream\nIL\n\n\nCharlotte\nNC\n\n\nChicago\nIL\n\n\nCincinnati\nOH\n\n\nCleves\nOH\n\n\nColumbus\nOH\n\n\nDallas\nTX\n\n\nEast Brunswick\nNJ\n\n\nFairfield\nIA\n\n\nFairfield\nNJ\n\n\n\n\n\nHere is what it looks like without DISTINCT:\n\nSELECT vendor_city, vendor_state\nFROM ap.vendors\nORDER BY vendor_city\n\n\nDisplaying records 1 - 15\n\n\nvendor_city\nvendor_state\n\n\n\n\nAnaheim\nCA\n\n\nAnaheim\nCA\n\n\nAnn Arbor\nMI\n\n\nAuburn Hills\nMI\n\n\nBoston\nMA\n\n\nBoston\nMA\n\n\nBoston\nMA\n\n\nBrea\nCA\n\n\nCarol Stream\nIL\n\n\nCharlotte\nNC\n\n\nChicago\nIL\n\n\nChicago\nIL\n\n\nCincinnati\nOH\n\n\nCincinnati\nOH\n\n\nCleves\nOH",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Retrieve Data from Single Table</span>"
    ]
  },
  {
    "objectID": "MySQL_3_Retrieve_Data_from_Single_Table.html#show-selection-of-rows-limit",
    "href": "MySQL_3_Retrieve_Data_from_Single_Table.html#show-selection-of-rows-limit",
    "title": "1  Retrieve Data from Single Table",
    "section": "1.3 Show Selection of Rows: LIMIT",
    "text": "1.3 Show Selection of Rows: LIMIT\nWhat if you don’t want to see all rows, just a few at the top? Or perhaps just a few after a particular number of rows?\nThe following allows you to trim all rows down to 10 rows after the 17th row:\n\nSELECT *\nFROM ap.vendors\nLIMIT 17, 10\n\n\n10 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvendor_id\nvendor_name\nvendor_address1\nvendor_address2\nvendor_city\nvendor_state\nvendor_zip_code\nvendor_phone\nvendor_contact_last_name\nvendor_contact_first_name\ndefault_terms_id\ndefault_account_number\n\n\n\n\n18\nFresno Photoengraving Company\n1952 “H” Street\nP.O. Box 1952\nFresno\nCA\n93718\n(559) 555-3005\nChaddick\nDerek\n3\n403\n\n\n19\nCrown Printing\n1730 “H” St\nNA\nFresno\nCA\n93721\n(559) 555-7473\nRandrup\nLeann\n2\n400\n\n\n20\nDiversified Printing & Pub\n2632 Saturn St\nNA\nBrea\nCA\n92621\n(714) 555-4541\nLane\nVanesa\n3\n400\n\n\n21\nThe Library Ltd\n7700 Forsyth\nNA\nSt Louis\nMO\n63105\n(314) 555-8834\nMarques\nMalia\n3\n540\n\n\n22\nMicro Center\n1555 W Lane Ave\nNA\nColumbus\nOH\n43221\n(614) 555-4435\nEvan\nEmily\n2\n160\n\n\n23\nYale Industrial Trucks-Fresno\n3711 W Franklin\nNA\nFresno\nCA\n93706\n(559) 555-2993\nAlexis\nAlexandro\n3\n532\n\n\n24\nZee Medical Service Co\n4221 W Sierra Madre #104\nNA\nWashington\nIA\n52353\nNA\nHallie\nJuliana\n3\n570\n\n\n25\nCalifornia Data Marketing\n2818 E Hamilton\nNA\nFresno\nCA\n93721\n(559) 555-3801\nJonessen\nMoises\n4\n540\n\n\n26\nSmall Press\n121 E Front St - 4th Floor\nNA\nTraverse City\nMI\n49684\nNA\nColette\nDusty\n3\n540\n\n\n27\nRich Advertising\n12 Daniel Road\nNA\nFairfield\nNJ\n07004\n(201) 555-9742\nNeil\nIngrid\n3\n540",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Retrieve Data from Single Table</span>"
    ]
  },
  {
    "objectID": "MySQL_3_Retrieve_Data_from_Single_Table.html#sorting-order-by",
    "href": "MySQL_3_Retrieve_Data_from_Single_Table.html#sorting-order-by",
    "title": "1  Retrieve Data from Single Table",
    "section": "1.4 Sorting: ORDER BY",
    "text": "1.4 Sorting: ORDER BY\nORDER BY: If you need to sort the outputs by values in a particular column.\n\nIf you need to sort by values in ascending order, you can specify ASC, but you can omit it, as that is the default behaviour\nIf you need to sort by values in descending order, you must specify with DESC\n\n\nSELECT invoice_number, invoice_date, invoice_total\nFROM ap.invoices\nORDER BY invoice_total DESC\n\n\nDisplaying records 1 - 15\n\n\ninvoice_number\ninvoice_date\ninvoice_total\n\n\n\n\n0-2058\n2022-05-28\n37966.19\n\n\nP-0259\n2022-07-19\n26881.40\n\n\n0-2060\n2022-07-24\n23517.58\n\n\n40318\n2022-06-01\n21842.00\n\n\nP-0608\n2022-07-23\n20551.18\n\n\n0-2436\n2022-07-31\n10976.06\n\n\nP02-3772\n2022-05-21\n7125.34\n\n\n509786\n2022-06-18\n6940.25\n\n\n10843\n2022-05-11\n4901.26\n\n\n989319-457\n2022-04-08\n3813.33\n\n\n989319-447\n2022-07-24\n3689.99\n\n\n989319-437\n2022-06-01\n2765.36\n\n\n367447\n2022-06-11\n2433.00\n\n\n989319-467\n2022-07-01\n2318.03\n\n\n989319-497\n2022-06-12\n2312.20",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Retrieve Data from Single Table</span>"
    ]
  },
  {
    "objectID": "MySQL_3_Retrieve_Data_from_Single_Table.html#subsetting-where",
    "href": "MySQL_3_Retrieve_Data_from_Single_Table.html#subsetting-where",
    "title": "1  Retrieve Data from Single Table",
    "section": "1.5 Subsetting: WHERE",
    "text": "1.5 Subsetting: WHERE\nIf you need to filter/subset the table by comparing some values, where clause is good to start. For a varity of all MySQL comparators, please see MySQL Comparators.\nThe following SQL chunk allows you to return for invoice with invoice_id equal to 17.\n\nSELECT invoice_id, invoice_total,\n       credit_total + payment_total AS total_credits\nFROM ap.invoices\nWHERE invoice_id = 17\n\n\n1 records\n\n\ninvoice_id\ninvoice_total\ntotal_credits\n\n\n\n\n17\n10\n10\n\n\n\n\n\nThe following SQL chunk allows you to return for invoice with invoice_date in June 2022.\nNotice 2 things in the following code chuck: - BETWEEN AND are good buddies, which allows you to specify a range. - to quote dates, you need to put them in single quotation marks.\n\nSELECT invoice_number, invoice_date, invoice_total\nFROM ap.invoices\nWHERE invoice_date BETWEEN '2022-06-01' AND '2022-06-30'\nORDER BY invoice_date\n\n\nDisplaying records 1 - 15\n\n\ninvoice_number\ninvoice_date\ninvoice_total\n\n\n\n\n989319-437\n2022-06-01\n2765.36\n\n\n111-92R-10094\n2022-06-01\n19.67\n\n\n40318\n2022-06-01\n21842.00\n\n\n1-202-2978\n2022-06-03\n33.00\n\n\n31359783\n2022-06-03\n1575.00\n\n\n547481328\n2022-06-03\n224.00\n\n\n111-92R-10097\n2022-06-04\n16.33\n\n\n547479217\n2022-06-07\n116.00\n\n\n989319-477\n2022-06-08\n2184.11\n\n\n111-92R-10092\n2022-06-09\n46.21\n\n\nQ545443\n2022-06-09\n1083.58\n\n\n963253245\n2022-06-10\n40.75\n\n\n97/553B\n2022-06-10\n313.55\n\n\n4-314-3057\n2022-06-11\n13.75\n\n\n963253256\n2022-06-11\n53.25",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Retrieve Data from Single Table</span>"
    ]
  },
  {
    "objectID": "MySQL_3_Retrieve_Data_from_Single_Table.html#use-functions",
    "href": "MySQL_3_Retrieve_Data_from_Single_Table.html#use-functions",
    "title": "1  Retrieve Data from Single Table",
    "section": "1.6 Use Functions",
    "text": "1.6 Use Functions\nFunctions are tools that help to perform complex calculations and data manipulation with ease.\nThere are two categories:\n\nbuilt-in (see MySQL built-in functions)\ncustom\n\nFunctions here are much like Excel functions: NAME(parameters…).\n\nFor Working with Character Values\nThe following allows to combine values from invoice_id, dash sign, values from vendor_id value row by row.\n\nSELECT CONCAT(invoice_id, '-', vendor_id) AS combo\nFROM ap.invoices\n\n\nDisplaying records 1 - 15\n\n\ncombo\n\n\n\n\n19-34\n\n\n52-34\n\n\n46-37\n\n\n50-37\n\n\n113-37\n\n\n15-48\n\n\n43-72\n\n\n89-72\n\n\n69-80\n\n\n110-80\n\n\n68-81\n\n\n95-82\n\n\n47-83\n\n\n98-83\n\n\n56-86\n\n\n\n\n\nThe following: 1. takes the first letter from the left of vendor_contact_first_name; 2. takes the first letter from the left of vendor_contact_last_name; 3. combines outouts from 1 and 2 above together row by row, which then relabel this new column as “initials”\n\nSELECT vendor_contact_first_name, vendor_contact_last_name,\n       CONCAT(LEFT(vendor_contact_first_name, 1), \n              LEFT(vendor_contact_last_name, 1)) AS initials\nFROM ap.vendors\n\n\nDisplaying records 1 - 15\n\n\nvendor_contact_first_name\nvendor_contact_last_name\ninitials\n\n\n\n\nFrancesco\nAlberto\nFA\n\n\nAnia\nIrvin\nAI\n\n\nLukas\nLiana\nLL\n\n\nKenzie\nQuinn\nKQ\n\n\nMichelle\nMarks\nMM\n\n\nAnton\nMauro\nAM\n\n\nTed\nMaegen\nTM\n\n\nErick\nKaleigh\nEK\n\n\nKaitlyn\nAnthoni\nKA\n\n\nBill\nLeigh\nBL\n\n\nKaitlin\nHostlery\nKH\n\n\nKendall\nMayte\nKM\n\n\nKorah\nBlanca\nKB\n\n\nMarvin\nQuintin\nMQ\n\n\nElisabeth\nDarien\nED\n\n\n\n\n\nWe will take a deeper dive with character values here: Working with Character Values.\n\n\nFor Working with Time\nThe following allows to format and reformat dates.\n\nSELECT invoice_date,\n  DATE_FORMAT(invoice_date, '%m/%d/%y') AS 'MM/DD/YY',\n  DATE_FORMAT(invoice_date, '%e-%b-%Y') AS 'DD-Mon-YYYY',\n  -- this is equivalent to retrive day component of a date\n  DATE_FORMAT(invoice_date, '%b') AS 'Mon'\nFROM ap.invoices\nORDER BY invoice_date\n\n\nDisplaying records 1 - 15\n\n\ninvoice_date\nMM/DD/YY\nDD-Mon-YYYY\nMon\n\n\n\n\n2022-04-08\n04/08/22\n8-Apr-2022\nApr\n\n\n2022-04-10\n04/10/22\n10-Apr-2022\nApr\n\n\n2022-04-13\n04/13/22\n13-Apr-2022\nApr\n\n\n2022-04-16\n04/16/22\n16-Apr-2022\nApr\n\n\n2022-04-16\n04/16/22\n16-Apr-2022\nApr\n\n\n2022-04-16\n04/16/22\n16-Apr-2022\nApr\n\n\n2022-04-21\n04/21/22\n21-Apr-2022\nApr\n\n\n2022-04-24\n04/24/22\n24-Apr-2022\nApr\n\n\n2022-04-24\n04/24/22\n24-Apr-2022\nApr\n\n\n2022-04-24\n04/24/22\n24-Apr-2022\nApr\n\n\n2022-04-25\n04/25/22\n25-Apr-2022\nApr\n\n\n2022-04-26\n04/26/22\n26-Apr-2022\nApr\n\n\n2022-04-30\n04/30/22\n30-Apr-2022\nApr\n\n\n2022-05-01\n05/01/22\n1-May-2022\nMay\n\n\n2022-05-03\n05/03/22\n3-May-2022\nMay\n\n\n\n\n\nWe will take a deeper dive with temporal values here: Working with Time.\n\n\nFor Working with Numeric Values\nThe following will round numeric values to different decimal precisions.\n\nSELECT invoice_date, invoice_total,\n       ROUND(invoice_total) AS nearest_dollar,\n       ROUND(invoice_total, 1) AS nearest_dime\nFROM ap.invoices\nORDER BY invoice_date\n\n\nDisplaying records 1 - 15\n\n\ninvoice_date\ninvoice_total\nnearest_dollar\nnearest_dime\n\n\n\n\n2022-04-08\n3813.33\n3813\n3813.3\n\n\n2022-04-10\n40.20\n40\n40.2\n\n\n2022-04-13\n138.75\n139\n138.8\n\n\n2022-04-16\n144.70\n145\n144.7\n\n\n2022-04-16\n15.50\n16\n15.5\n\n\n2022-04-16\n42.75\n43\n42.8\n\n\n2022-04-21\n172.50\n173\n172.5\n\n\n2022-04-24\n95.00\n95\n95.0\n\n\n2022-04-24\n601.95\n602\n602.0\n\n\n2022-04-24\n42.67\n43\n42.7\n\n\n2022-04-25\n42.50\n43\n42.5\n\n\n2022-04-26\n662.00\n662\n662.0\n\n\n2022-04-30\n16.33\n16\n16.3\n\n\n2022-05-01\n6.00\n6\n6.0\n\n\n2022-05-03\n856.92\n857\n856.9\n\n\n\n\n\nWe will take a deeper dive with temporal values here: Working with Numeric Data.\n\ndbDisconnect(conn)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Retrieve Data from Single Table</span>"
    ]
  },
  {
    "objectID": "MySQL_4_Retrieve_Data_from_Different_Tables.html",
    "href": "MySQL_4_Retrieve_Data_from_Different_Tables.html",
    "title": "2  Retrieve Data from 2 or More Tables",
    "section": "",
    "text": "2.1 Reference\nDefault database in this chapter is “ap”.\nOther databases included in the simulation MySQL server:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Retrieve Data from 2 or More Tables</span>"
    ]
  },
  {
    "objectID": "MySQL_4_Retrieve_Data_from_Different_Tables.html#reference",
    "href": "MySQL_4_Retrieve_Data_from_Different_Tables.html#reference",
    "title": "2  Retrieve Data from 2 or More Tables",
    "section": "",
    "text": "om\nex",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Retrieve Data from 2 or More Tables</span>"
    ]
  },
  {
    "objectID": "MySQL_4_Retrieve_Data_from_Different_Tables.html#join-logic",
    "href": "MySQL_4_Retrieve_Data_from_Different_Tables.html#join-logic",
    "title": "2  Retrieve Data from 2 or More Tables",
    "section": "2.2 Join Logic",
    "text": "2.2 Join Logic\nIllustration of common join types:\n\ninner join\nleft join\nright join\nouter join\nunion (“stacking”)\nfull (outer) join\n\nNote: full join is not available for all SQL dialects. It is a combination of left join + union + right join\n Source\nSome other join types:\n\n(Left) Semi-Join: returns only rows in the left table that have matching rows in the right table\n(Left) Anti-Join: returns rows in the left table that have no matching rows in the right table\n\nNote:\n\nSemi-join and Anti-join don’t bring any additional fields from other tables.\nSemi-join and Anti-join are not covered in details here, because MySQL doesn’t have native implementation for these join types.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Retrieve Data from 2 or More Tables</span>"
    ]
  },
  {
    "objectID": "MySQL_4_Retrieve_Data_from_Different_Tables.html#inner-join",
    "href": "MySQL_4_Retrieve_Data_from_Different_Tables.html#inner-join",
    "title": "2  Retrieve Data from 2 or More Tables",
    "section": "2.3 Inner Join",
    "text": "2.3 Inner Join\ntables overview\n\nSELECT *\nFROM invoices\nORDER BY invoice_number\nLIMIT 10\n\n\n10 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n39\n110\n0-2058\n2022-05-28\n37966.19\n37966.19\n0.00\n3\n2022-06-27\n2022-06-30\n\n\n106\n110\n0-2060\n2022-07-24\n23517.58\n21221.63\n2295.95\n3\n2022-08-23\n2022-08-27\n\n\n112\n110\n0-2436\n2022-07-31\n10976.06\n0.00\n0.00\n3\n2022-08-30\nNA\n\n\n30\n123\n1-200-5164\n2022-05-20\n63.40\n63.40\n0.00\n3\n2022-06-19\n2022-06-24\n\n\n48\n123\n1-202-2978\n2022-06-03\n33.00\n33.00\n0.00\n3\n2022-07-03\n2022-07-05\n\n\n21\n119\n10843\n2022-05-11\n4901.26\n4901.26\n0.00\n2\n2022-05-31\n2022-05-29\n\n\n74\n102\n109596\n2022-06-24\n41.80\n41.80\n0.00\n4\n2022-08-03\n2022-08-04\n\n\n53\n95\n111-92R-10092\n2022-06-09\n46.21\n46.21\n0.00\n2\n2022-06-29\n2022-07-02\n\n\n83\n95\n111-92R-10093\n2022-07-06\n39.77\n39.77\n0.00\n2\n2022-07-26\n2022-07-22\n\n\n44\n95\n111-92R-10094\n2022-06-01\n19.67\n19.67\n0.00\n2\n2022-06-21\n2022-06-24\n\n\n\n\n\n\nSELECT *\nFROM vendors \nORDER BY vendor_name\nLIMIT 10\n\n\n10 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvendor_id\nvendor_name\nvendor_address1\nvendor_address2\nvendor_city\nvendor_state\nvendor_zip_code\nvendor_phone\nvendor_contact_last_name\nvendor_contact_first_name\ndefault_terms_id\ndefault_account_number\n\n\n\n\n94\nAbbey Office Furnishings\n4150 W Shaw Ave\nNA\nFresno\nCA\n93722\n(559) 555-8300\nFrancis\nKyra\n2\n150\n\n\n61\nAmerican Booksellers Assoc\n828 S Broadway\nNA\nTarrytown\nNY\n10591\n(800) 555-0037\nAngelica\nNashalie\n3\n574\n\n\n98\nAmerican Express\nBox 0001\nNA\nLos Angeles\nCA\n90096\n(800) 555-3344\nStory\nKirsten\n2\n160\n\n\n15\nASC Signs\n1528 N Sierra Vista\nNA\nFresno\nCA\n93703\nNA\nDarien\nElisabeth\n1\n546\n\n\n66\nAscom Hasler Mailing Systems\nPO Box 895\nNA\nShelton\nCT\n06484\nNA\nLewis\nDarnell\n3\n532\n\n\n93\nAT&T\nPO Box 78225\nNA\nPhoenix\nAZ\n85062\nNA\nWesley\nAlisha\n3\n522\n\n\n52\nAztek Label\nAccounts Payable\n1150 N Tustin Ave\nAnaheim\nCA\n92807\n(714) 555-9000\nGriffin\nBrian\n3\n551\n\n\n47\nBaker & Taylor Books\nFive Lakepointe Plaza, Ste 500\n2709 Water Ridge Parkway\nCharlotte\nNC\n28217\n(704) 555-3500\nBernardo\nBrittnee\n3\n572\n\n\n99\nBertelsmann Industry Svcs. Inc\n28210 N Avenue Stanford\nNA\nValencia\nCA\n91355\n(805) 555-0584\nPotter\nLance\n3\n400\n\n\n8\nBFI Industries\nPO Box 9369\nNA\nFresno\nCA\n93792\n(559) 555-1551\nKaleigh\nErick\n3\n521\n\n\n\n\n\nExplicit (INNER JOIN)\n\nSELECT invoice_number, vendor_name\nFROM vendors INNER JOIN invoices\n    ON vendors.vendor_id = invoices.vendor_id\nORDER BY invoice_number\nLIMIT 10\n\n\n10 records\n\n\ninvoice_number\nvendor_name\n\n\n\n\n0-2058\nMalloy Lithographing Inc\n\n\n0-2060\nMalloy Lithographing Inc\n\n\n0-2436\nMalloy Lithographing Inc\n\n\n1-200-5164\nFederal Express Corporation\n\n\n1-202-2978\nFederal Express Corporation\n\n\n10843\nYesmed, Inc\n\n\n109596\nCoffee Break Service\n\n\n111-92R-10092\nPacific Bell\n\n\n111-92R-10093\nPacific Bell\n\n\n111-92R-10094\nPacific Bell\n\n\n\n\n\nCompare to the above:\n\ntable aliases now used\njust JOIN, instead of full INNER JOIN, now used\n\n\nSELECT invoice_number, vendor_name, invoice_due_date,\n    invoice_total - payment_total - credit_total\n    AS balance_due\nFROM vendors v JOIN invoices i\n    ON v.vendor_id = i.vendor_id\nWHERE invoice_total - payment_total - credit_total &gt; 0\nORDER BY invoice_due_date DESC\n\n\n11 records\n\n\n\n\n\n\n\n\ninvoice_number\nvendor_name\ninvoice_due_date\nbalance_due\n\n\n\n\n547480102\nBlue Cross\n2022-08-31\n224.00\n\n\n0-2436\nMalloy Lithographing Inc\n2022-08-30\n10976.06\n\n\n9982771\nFord Motor Credit Company\n2022-08-23\n503.20\n\n\nP-0608\nMalloy Lithographing Inc\n2022-08-22\n19351.18\n\n\n263253270\nFederal Express Corporation\n2022-08-21\n67.92\n\n\n263253273\nFederal Express Corporation\n2022-08-21\n30.75\n\n\n263253268\nFederal Express Corporation\n2022-08-20\n59.97\n\n\n963253264\nFederal Express Corporation\n2022-08-17\n52.25\n\n\n134116\nCardinal Business Media, Inc.\n2022-08-17\n90.36\n\n\n31361833\nIngram\n2022-08-10\n579.42\n\n\n39104\nData Reproductions Corp\n2022-08-09\n85.31\n\n\n\n\n\nCompare to the above:\n\nalias now refers to a table from a different database\n\n\nSELECT vendor_name, customer_last_name,\n    customer_first_name, vendor_state AS state,\n    vendor_city AS city\nFROM vendors v\n    JOIN om.customers c\n    ON v.vendor_zip_code = c.customer_zip\nORDER BY state, city\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\nvendor_name\ncustomer_last_name\ncustomer_first_name\nstate\ncity\n\n\n\n\nWells Fargo Bank\nMarissa\nKyle\nAZ\nPhoenix\n\n\nAztek Label\nIrvin\nAnia\nCA\nAnaheim\n\n\nZylka Design\nNeftaly\nThalia\nCA\nFresno\n\n\nLou Gentile’s Flower Basket\nDamien\nDeborah\nCA\nFresno\n\n\nCostco\nHolbrooke\nRashad\nCA\nFresno\n\n\nCostco\nNeftaly\nThalia\nCA\nFresno\n\n\nShields Design\nDamien\nDeborah\nCA\nFresno\n\n\nWakefield Co\nNeftaly\nThalia\nCA\nFresno\n\n\nWakefield Co\nHolbrooke\nRashad\nCA\nFresno\n\n\nGary McKeighan Insurance\nHolbrooke\nRashad\nCA\nFresno\n\n\nGary McKeighan Insurance\nNeftaly\nThalia\nCA\nFresno\n\n\nDigital Dreamworks\nHolbrooke\nRashad\nCA\nFresno\n\n\nDigital Dreamworks\nNeftaly\nThalia\nCA\nFresno\n\n\nGostanian General Building\nHolbrooke\nRashad\nCA\nFresno\n\n\nGostanian General Building\nNeftaly\nThalia\nCA\nFresno\n\n\n\n\n\nImplicit joins (WHERE clause instead of ON clause)\n\nSELECT invoice_number, vendor_name\nFROM vendors v, invoices i\nWHERE v.vendor_id = i.vendor_id\nORDER BY invoice_number\nLIMIT 10\n\n\n10 records\n\n\ninvoice_number\nvendor_name\n\n\n\n\n0-2058\nMalloy Lithographing Inc\n\n\n0-2060\nMalloy Lithographing Inc\n\n\n0-2436\nMalloy Lithographing Inc\n\n\n1-200-5164\nFederal Express Corporation\n\n\n1-202-2978\nFederal Express Corporation\n\n\n10843\nYesmed, Inc\n\n\n109596\nCoffee Break Service\n\n\n111-92R-10092\nPacific Bell\n\n\n111-92R-10093\nPacific Bell\n\n\n111-92R-10094\nPacific Bell\n\n\n\n\n\nImplicit joins with (USING keyword), results identical as the above.\n\nSELECT invoice_number, vendor_name\nFROM vendors \n    JOIN invoices USING (vendor_id)\nORDER BY invoice_number\n\n\nDisplaying records 1 - 15\n\n\ninvoice_number\nvendor_name\n\n\n\n\n0-2058\nMalloy Lithographing Inc\n\n\n0-2060\nMalloy Lithographing Inc\n\n\n0-2436\nMalloy Lithographing Inc\n\n\n1-200-5164\nFederal Express Corporation\n\n\n1-202-2978\nFederal Express Corporation\n\n\n10843\nYesmed, Inc\n\n\n109596\nCoffee Break Service\n\n\n111-92R-10092\nPacific Bell\n\n\n111-92R-10093\nPacific Bell\n\n\n111-92R-10094\nPacific Bell\n\n\n111-92R-10095\nPacific Bell\n\n\n111-92R-10096\nPacific Bell\n\n\n111-92R-10097\nPacific Bell\n\n\n111897\nSuburban Propane\n\n\n121897\nGostanian General Building\n\n\n\n\n\nImplicit joins with (USING keyword), results identical as the above.\n\nuse inner join\nuse columns of same names from the tables\nMySQL, yes, but not for all SQL dialects\n\n\nSELECT invoice_number, vendor_name\nFROM vendors \n    NATURAL JOIN invoices\nORDER BY invoice_number\n\n\nDisplaying records 1 - 15\n\n\ninvoice_number\nvendor_name\n\n\n\n\n0-2058\nMalloy Lithographing Inc\n\n\n0-2060\nMalloy Lithographing Inc\n\n\n0-2436\nMalloy Lithographing Inc\n\n\n1-200-5164\nFederal Express Corporation\n\n\n1-202-2978\nFederal Express Corporation\n\n\n10843\nYesmed, Inc\n\n\n109596\nCoffee Break Service\n\n\n111-92R-10092\nPacific Bell\n\n\n111-92R-10093\nPacific Bell\n\n\n111-92R-10094\nPacific Bell\n\n\n111-92R-10095\nPacific Bell\n\n\n111-92R-10096\nPacific Bell\n\n\n111-92R-10097\nPacific Bell\n\n\n111897\nSuburban Propane\n\n\n121897\nGostanian General Building\n\n\n\n\n\nJoin on multiple columns (“combo join”, join based on combination of columns/keys)\ntable customers overview:\n\nSELECT *\nFROM om.customers\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\n\n\n\n\ncustomer_id\ncustomer_first_name\ncustomer_last_name\ncustomer_address\ncustomer_city\ncustomer_state\ncustomer_zip\ncustomer_phone\ncustomer_fax\n\n\n\n\n1\nKorah\nBlanca\n1555 W Lane Ave\nColumbus\nOH\n43221\n6145554435\n6145553928\n\n\n2\nYash\nRandall\n11 E Rancho Madera Rd\nMadison\nWI\n53707\n2095551205\n2095552262\n\n\n3\nJohnathon\nMillerton\n60 Madison Ave\nNew York\nNY\n10010\n2125554800\nNULL\n\n\n4\nMikayla\nDamion\n2021 K Street Nw\nWashington\nDC\n20006\n2025555561\nNULL\n\n\n5\nKendall\nMayte\n4775 E Miami River Rd\nCleves\nOH\n45002\n5135553043\nNULL\n\n\n6\nKaitlin\nHostlery\n3250 Spring Grove Ave\nCincinnati\nOH\n45225\n8005551957\n8005552826\n\n\n7\nDerek\nChaddick\n9022 E Merchant Wy\nFairfield\nIA\n52556\n5155556130\nNULL\n\n\n8\nDeborah\nDamien\n415 E Olive Ave\nFresno\nCA\n93728\n5595558060\nNULL\n\n\n9\nKarina\nLacy\n882 W Easton Wy\nLos Angeles\nCA\n90084\n8005557000\nNULL\n\n\n10\nKurt\nNickalus\n28210 N Avenue Stanford\nValencia\nCA\n91355\n8055550584\n055556689\n\n\n11\nKelsey\nEulalia\n7833 N Ridge Rd\nSacramento\nCA\n95887\n2095557500\n2095551302\n\n\n12\nAnders\nRohansen\n12345 E 67th Ave NW\nTakoma Park\nMD\n24512\n3385556772\nNULL\n\n\n13\nThalia\nNeftaly\n2508 W Shaw Ave\nFresno\nCA\n93711\n5595556245\nNULL\n\n\n14\nGonzalo\nKeeton\n12 Daniel Road\nFairfield\nNJ\n07004\n2015559742\nNULL\n\n\n15\nAnia\nIrvin\n1099 N Farcourt St\nOrange\nCA\n92807\n7145559000\nNULL\n\n\n\n\n\n\nSELECT *\nFROM ex.employees\n\n\n9 records\n\n\nemployee_id\nlast_name\nfirst_name\ndepartment_number\nmanager_id\n\n\n\n\n1\nSmith\nCindy\n2\nNA\n\n\n2\nJones\nElmer\n4\n1\n\n\n3\nSimonian\nRalph\n2\n2\n\n\n4\nHernandez\nOlivia\n1\n9\n\n\n5\nAaronsen\nRobert\n2\n4\n\n\n6\nWatson\nDenise\n6\n8\n\n\n7\nHardy\nThomas\n5\n2\n\n\n8\nO’Leary\nRhea\n4\n9\n\n\n9\nLocario\nPaulo\n6\n1\n\n\n\n\n\n\n“Are there any customers and employees with the same first and last name?”\n\n\nSELECT customer_first_name, customer_last_name\nFROM om.customers c INNER JOIN ex.employees e \n    ON c.customer_first_name = e.first_name \n   AND c.customer_last_name = e.last_name\n\n\n0 records\n\n\ncustomer_first_name\ncustomer_last_name\n\n\n\n\n\n\n\n\nA Somewhat Special Example - Self Join\nTo make self-join work:\n\nmust use alias to avoid recycling same table reference\n“In those cities where more than 1 vendors reside, what are the OTHER vendors that in the same city and state?”\n\nExplore the vendor table:\n\nSELECT *\nFROM vendors v1\nORDER BY v1.vendor_id, v1.vendor_state, v1.vendor_city\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvendor_id\nvendor_name\nvendor_address1\nvendor_address2\nvendor_city\nvendor_state\nvendor_zip_code\nvendor_phone\nvendor_contact_last_name\nvendor_contact_first_name\ndefault_terms_id\ndefault_account_number\n\n\n\n\n1\nUS Postal Service\nAttn: Supt. Window Services\nPO Box 7005\nMadison\nWI\n53707\n(800) 555-1205\nAlberto\nFrancesco\n1\n552\n\n\n2\nNational Information Data Ctr\nPO Box 96621\nNA\nWashington\nDC\n20120\n(301) 555-8950\nIrvin\nAnia\n3\n540\n\n\n3\nRegister of Copyrights\nLibrary Of Congress\nNA\nWashington\nDC\n20559\nNA\nLiana\nLukas\n3\n403\n\n\n4\nJobtrak\n1990 Westwood Blvd Ste 260\nNA\nLos Angeles\nCA\n90025\n(800) 555-8725\nQuinn\nKenzie\n3\n572\n\n\n5\nNewbrige Book Clubs\n3000 Cindel Drive\nNA\nWashington\nNJ\n07882\n(800) 555-9980\nMarks\nMichelle\n4\n394\n\n\n6\nCalifornia Chamber Of Commerce\n3255 Ramos Cir\nNA\nSacramento\nCA\n95827\n(916) 555-6670\nMauro\nAnton\n3\n572\n\n\n7\nTowne Advertiser’s Mailing Svcs\nKevin Minder\n3441 W Macarthur Blvd\nSanta Ana\nCA\n92704\nNA\nMaegen\nTed\n3\n540\n\n\n8\nBFI Industries\nPO Box 9369\nNA\nFresno\nCA\n93792\n(559) 555-1551\nKaleigh\nErick\n3\n521\n\n\n9\nPacific Gas & Electric\nBox 52001\nNA\nSan Francisco\nCA\n94152\n(800) 555-6081\nAnthoni\nKaitlyn\n3\n521\n\n\n10\nRobbins Mobile Lock And Key\n4669 N Fresno\nNA\nFresno\nCA\n93726\n(559) 555-9375\nLeigh\nBill\n2\n523\n\n\n11\nBill Marvin Electric Inc\n4583 E Home\nNA\nFresno\nCA\n93703\n(559) 555-5106\nHostlery\nKaitlin\n2\n523\n\n\n12\nCity Of Fresno\nPO Box 2069\nNA\nFresno\nCA\n93718\n(559) 555-9999\nMayte\nKendall\n3\n574\n\n\n13\nGolden Eagle Insurance Co\nPO Box 85826\nNA\nSan Diego\nCA\n92186\nNA\nBlanca\nKorah\n3\n590\n\n\n14\nExpedata Inc\n4420 N. First Street, Suite 108\nNA\nFresno\nCA\n93726\n(559) 555-9586\nQuintin\nMarvin\n3\n589\n\n\n15\nASC Signs\n1528 N Sierra Vista\nNA\nFresno\nCA\n93703\nNA\nDarien\nElisabeth\n1\n546\n\n\n\n\n\nStep 1: simple self-joining based on city and state of vendor\n\nSELECT *\nFROM vendors v1 INNER JOIN vendors v2\n    ON v1.vendor_city = v2.vendor_city AND\n       v1.vendor_state = v2.vendor_state\nORDER BY v1.vendor_id, v1.vendor_state, v1.vendor_city\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvendor_id\nvendor_name\nvendor_address1\nvendor_address2\nvendor_city\nvendor_state\nvendor_zip_code\nvendor_phone\nvendor_contact_last_name\nvendor_contact_first_name\ndefault_terms_id\ndefault_account_number\nvendor_id\nvendor_name\nvendor_address1\nvendor_address2\nvendor_city\nvendor_state\nvendor_zip_code\nvendor_phone\nvendor_contact_last_name\nvendor_contact_first_name\ndefault_terms_id\ndefault_account_number\n\n\n\n\n1\nUS Postal Service\nAttn: Supt. Window Services\nPO Box 7005\nMadison\nWI\n53707\n(800) 555-1205\nAlberto\nFrancesco\n1\n552\n1\nUS Postal Service\nAttn: Supt. Window Services\nPO Box 7005\nMadison\nWI\n53707\n(800) 555-1205\nAlberto\nFrancesco\n1\n552\n\n\n2\nNational Information Data Ctr\nPO Box 96621\nNA\nWashington\nDC\n20120\n(301) 555-8950\nIrvin\nAnia\n3\n540\n2\nNational Information Data Ctr\nPO Box 96621\nNA\nWashington\nDC\n20120\n(301) 555-8950\nIrvin\nAnia\n3\n540\n\n\n2\nNational Information Data Ctr\nPO Box 96621\nNA\nWashington\nDC\n20120\n(301) 555-8950\nIrvin\nAnia\n3\n540\n3\nRegister of Copyrights\nLibrary Of Congress\nNA\nWashington\nDC\n20559\nNA\nLiana\nLukas\n3\n403\n\n\n2\nNational Information Data Ctr\nPO Box 96621\nNA\nWashington\nDC\n20120\n(301) 555-8950\nIrvin\nAnia\n3\n540\n82\nReiter’s Scientific & Pro Books\n2021 K Street Nw\nNA\nWashington\nDC\n20006\n(202) 555-5561\nRodolfo\nCarlee\n2\n572\n\n\n3\nRegister of Copyrights\nLibrary Of Congress\nNA\nWashington\nDC\n20559\nNA\nLiana\nLukas\n3\n403\n82\nReiter’s Scientific & Pro Books\n2021 K Street Nw\nNA\nWashington\nDC\n20006\n(202) 555-5561\nRodolfo\nCarlee\n2\n572\n\n\n3\nRegister of Copyrights\nLibrary Of Congress\nNA\nWashington\nDC\n20559\nNA\nLiana\nLukas\n3\n403\n2\nNational Information Data Ctr\nPO Box 96621\nNA\nWashington\nDC\n20120\n(301) 555-8950\nIrvin\nAnia\n3\n540\n\n\n3\nRegister of Copyrights\nLibrary Of Congress\nNA\nWashington\nDC\n20559\nNA\nLiana\nLukas\n3\n403\n3\nRegister of Copyrights\nLibrary Of Congress\nNA\nWashington\nDC\n20559\nNA\nLiana\nLukas\n3\n403\n\n\n4\nJobtrak\n1990 Westwood Blvd Ste 260\nNA\nLos Angeles\nCA\n90025\n(800) 555-8725\nQuinn\nKenzie\n3\n572\n42\nOpamp Technical Books\n1033 N Sycamore Ave.\nNA\nLos Angeles\nCA\n90038\n(213) 555-4322\nParis\nGideon\n3\n572\n\n\n4\nJobtrak\n1990 Westwood Blvd Ste 260\nNA\nLos Angeles\nCA\n90025\n(800) 555-8725\nQuinn\nKenzie\n3\n572\n4\nJobtrak\n1990 Westwood Blvd Ste 260\nNA\nLos Angeles\nCA\n90025\n(800) 555-8725\nQuinn\nKenzie\n3\n572\n\n\n4\nJobtrak\n1990 Westwood Blvd Ste 260\nNA\nLos Angeles\nCA\n90025\n(800) 555-8725\nQuinn\nKenzie\n3\n572\n106\nFord Motor Credit Company\nDept 0419\nNA\nLos Angeles\nCA\n90084\n(800) 555-7000\nSnyder\nKaren\n3\n582\n\n\n4\nJobtrak\n1990 Westwood Blvd Ste 260\nNA\nLos Angeles\nCA\n90025\n(800) 555-8725\nQuinn\nKenzie\n3\n572\n112\nOffice Depot\nFile No 81901\nNA\nLos Angeles\nCA\n90074\n(800) 555-1711\nPinsippi\nVal\n3\n570\n\n\n4\nJobtrak\n1990 Westwood Blvd Ste 260\nNA\nLos Angeles\nCA\n90025\n(800) 555-8725\nQuinn\nKenzie\n3\n572\n98\nAmerican Express\nBox 0001\nNA\nLos Angeles\nCA\n90096\n(800) 555-3344\nStory\nKirsten\n2\n160\n\n\n5\nNewbrige Book Clubs\n3000 Cindel Drive\nNA\nWashington\nNJ\n07882\n(800) 555-9980\nMarks\nMichelle\n4\n394\n5\nNewbrige Book Clubs\n3000 Cindel Drive\nNA\nWashington\nNJ\n07882\n(800) 555-9980\nMarks\nMichelle\n4\n394\n\n\n6\nCalifornia Chamber Of Commerce\n3255 Ramos Cir\nNA\nSacramento\nCA\n95827\n(916) 555-6670\nMauro\nAnton\n3\n572\n67\nBill Jones\nSecretary Of State\nPO Box 944230\nSacramento\nCA\n94244\nNA\nDeasia\nTristin\n3\n589\n\n\n6\nCalifornia Chamber Of Commerce\n3255 Ramos Cir\nNA\nSacramento\nCA\n95827\n(916) 555-6670\nMauro\nAnton\n3\n572\n77\nState Board Of Equalization\nPO Box 942808\nNA\nSacramento\nCA\n94208\n(916) 555-4911\nDean\nJulissa\n1\n631\n\n\n\n\n\nUnequal join to remove the vendor itself, so that the rest of the vendors are left in the result:\n\nSELECT *\nFROM vendors v1 INNER JOIN vendors v2\n    ON v1.vendor_city = v2.vendor_city AND\n       v1.vendor_state = v2.vendor_state AND\n       v1.vendor_name &lt;&gt; v2.vendor_name\nORDER BY v1.vendor_id, v1.vendor_state, v1.vendor_city\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvendor_id\nvendor_name\nvendor_address1\nvendor_address2\nvendor_city\nvendor_state\nvendor_zip_code\nvendor_phone\nvendor_contact_last_name\nvendor_contact_first_name\ndefault_terms_id\ndefault_account_number\nvendor_id\nvendor_name\nvendor_address1\nvendor_address2\nvendor_city\nvendor_state\nvendor_zip_code\nvendor_phone\nvendor_contact_last_name\nvendor_contact_first_name\ndefault_terms_id\ndefault_account_number\n\n\n\n\n2\nNational Information Data Ctr\nPO Box 96621\nNA\nWashington\nDC\n20120\n(301) 555-8950\nIrvin\nAnia\n3\n540\n82\nReiter’s Scientific & Pro Books\n2021 K Street Nw\nNA\nWashington\nDC\n20006\n(202) 555-5561\nRodolfo\nCarlee\n2\n572\n\n\n2\nNational Information Data Ctr\nPO Box 96621\nNA\nWashington\nDC\n20120\n(301) 555-8950\nIrvin\nAnia\n3\n540\n3\nRegister of Copyrights\nLibrary Of Congress\nNA\nWashington\nDC\n20559\nNA\nLiana\nLukas\n3\n403\n\n\n3\nRegister of Copyrights\nLibrary Of Congress\nNA\nWashington\nDC\n20559\nNA\nLiana\nLukas\n3\n403\n2\nNational Information Data Ctr\nPO Box 96621\nNA\nWashington\nDC\n20120\n(301) 555-8950\nIrvin\nAnia\n3\n540\n\n\n3\nRegister of Copyrights\nLibrary Of Congress\nNA\nWashington\nDC\n20559\nNA\nLiana\nLukas\n3\n403\n82\nReiter’s Scientific & Pro Books\n2021 K Street Nw\nNA\nWashington\nDC\n20006\n(202) 555-5561\nRodolfo\nCarlee\n2\n572\n\n\n4\nJobtrak\n1990 Westwood Blvd Ste 260\nNA\nLos Angeles\nCA\n90025\n(800) 555-8725\nQuinn\nKenzie\n3\n572\n42\nOpamp Technical Books\n1033 N Sycamore Ave.\nNA\nLos Angeles\nCA\n90038\n(213) 555-4322\nParis\nGideon\n3\n572\n\n\n4\nJobtrak\n1990 Westwood Blvd Ste 260\nNA\nLos Angeles\nCA\n90025\n(800) 555-8725\nQuinn\nKenzie\n3\n572\n98\nAmerican Express\nBox 0001\nNA\nLos Angeles\nCA\n90096\n(800) 555-3344\nStory\nKirsten\n2\n160\n\n\n4\nJobtrak\n1990 Westwood Blvd Ste 260\nNA\nLos Angeles\nCA\n90025\n(800) 555-8725\nQuinn\nKenzie\n3\n572\n112\nOffice Depot\nFile No 81901\nNA\nLos Angeles\nCA\n90074\n(800) 555-1711\nPinsippi\nVal\n3\n570\n\n\n4\nJobtrak\n1990 Westwood Blvd Ste 260\nNA\nLos Angeles\nCA\n90025\n(800) 555-8725\nQuinn\nKenzie\n3\n572\n106\nFord Motor Credit Company\nDept 0419\nNA\nLos Angeles\nCA\n90084\n(800) 555-7000\nSnyder\nKaren\n3\n582\n\n\n6\nCalifornia Chamber Of Commerce\n3255 Ramos Cir\nNA\nSacramento\nCA\n95827\n(916) 555-6670\nMauro\nAnton\n3\n572\n95\nPacific Bell\nNA\nNA\nSacramento\nCA\n95887\n(209) 555-7500\nNickalus\nKurt\n2\n522\n\n\n6\nCalifornia Chamber Of Commerce\n3255 Ramos Cir\nNA\nSacramento\nCA\n95827\n(916) 555-6670\nMauro\nAnton\n3\n572\n116\nState of California\nEmployment Development Dept\nPO Box 826276\nSacramento\nCA\n94230\n(209) 555-5132\nArticunia\nMercedez\n1\n631\n\n\n6\nCalifornia Chamber Of Commerce\n3255 Ramos Cir\nNA\nSacramento\nCA\n95827\n(916) 555-6670\nMauro\nAnton\n3\n572\n107\nFranchise Tax Board\nPO Box 942857\nNA\nSacramento\nCA\n94257\nNA\nPrado\nAnita\n4\n507\n\n\n6\nCalifornia Chamber Of Commerce\n3255 Ramos Cir\nNA\nSacramento\nCA\n95827\n(916) 555-6670\nMauro\nAnton\n3\n572\n87\nDMV Renewal\nPO Box 942894\nNA\nSacramento\nCA\n94294\nNA\nJosey\nLorena\n4\n568\n\n\n6\nCalifornia Chamber Of Commerce\n3255 Ramos Cir\nNA\nSacramento\nCA\n95827\n(916) 555-6670\nMauro\nAnton\n3\n572\n77\nState Board Of Equalization\nPO Box 942808\nNA\nSacramento\nCA\n94208\n(916) 555-4911\nDean\nJulissa\n1\n631\n\n\n6\nCalifornia Chamber Of Commerce\n3255 Ramos Cir\nNA\nSacramento\nCA\n95827\n(916) 555-6670\nMauro\nAnton\n3\n572\n67\nBill Jones\nSecretary Of State\nPO Box 944230\nSacramento\nCA\n94244\nNA\nDeasia\nTristin\n3\n589\n\n\n8\nBFI Industries\nPO Box 9369\nNA\nFresno\nCA\n93792\n(559) 555-1551\nKaleigh\nErick\n3\n521\n63\nLou Gentile’s Flower Basket\n722 E Olive Ave\nNA\nFresno\nCA\n93728\n(559) 555-6643\nAnum\nTrisha\n1\n570\n\n\n\n\n\nTake distinct values of what’s left in the “left table”. These are the other vendors in the same cities and states.\n\nSELECT DISTINCT v1.vendor_name, v1.vendor_city, \n    v1.vendor_state\nFROM vendors v1 INNER JOIN vendors v2\n    ON v1.vendor_city = v2.vendor_city AND\n       v1.vendor_state = v2.vendor_state AND\n       v1.vendor_name &lt;&gt; v2.vendor_name\nORDER BY v1.vendor_state, v1.vendor_city\n\n\nDisplaying records 1 - 15\n\n\nvendor_name\nvendor_city\nvendor_state\n\n\n\n\nComputer Library\nPhoenix\nAZ\n\n\nWells Fargo Bank\nPhoenix\nAZ\n\n\nAT&T\nPhoenix\nAZ\n\n\nAztek Label\nAnaheim\nCA\n\n\nBlue Shield of California\nAnaheim\nCA\n\n\nShields Design\nFresno\nCA\n\n\nGraylift\nFresno\nCA\n\n\nASC Signs\nFresno\nCA\n\n\nInternal Revenue Service\nFresno\nCA\n\n\nFresno Photoengraving Company\nFresno\nCA\n\n\nCostco\nFresno\nCA\n\n\nCrown Printing\nFresno\nCA\n\n\nYale Industrial Trucks-Fresno\nFresno\nCA\n\n\nZylka Design\nFresno\nCA\n\n\nDataforms/West\nFresno\nCA",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Retrieve Data from 2 or More Tables</span>"
    ]
  },
  {
    "objectID": "MySQL_4_Retrieve_Data_from_Different_Tables.html#outer-join",
    "href": "MySQL_4_Retrieve_Data_from_Different_Tables.html#outer-join",
    "title": "2  Retrieve Data from 2 or More Tables",
    "section": "2.4 Outer Join",
    "text": "2.4 Outer Join\nThis includes:\n\nleft join\nright join\nfull outer join\n\ntables overview\n\nSELECT *\nFROM ex.departments\nLIMIT 10\n\n\n5 records\n\n\ndepartment_number\ndepartment_name\n\n\n\n\n1\nAccounting\n\n\n2\nPayroll\n\n\n3\nOperations\n\n\n4\nPersonnel\n\n\n5\nMaintenance\n\n\n\n\n\n\nSELECT *\nFROM ex.employees \nLIMIT 10\n\n\n9 records\n\n\nemployee_id\nlast_name\nfirst_name\ndepartment_number\nmanager_id\n\n\n\n\n1\nSmith\nCindy\n2\nNA\n\n\n2\nJones\nElmer\n4\n1\n\n\n3\nSimonian\nRalph\n2\n2\n\n\n4\nHernandez\nOlivia\n1\n9\n\n\n5\nAaronsen\nRobert\n2\n4\n\n\n6\nWatson\nDenise\n6\n8\n\n\n7\nHardy\nThomas\n5\n2\n\n\n8\nO’Leary\nRhea\n4\n9\n\n\n9\nLocario\nPaulo\n6\n1\n\n\n\n\n\n\nSELECT *\nFROM ex.projects \nLIMIT 10\n\n\n8 records\n\n\nproject_number\nemployee_id\n\n\n\n\nP1011\n8\n\n\nP1011\n4\n\n\nP1012\n3\n\n\nP1012\n1\n\n\nP1012\n5\n\n\nP1013\n6\n\n\nP1013\n9\n\n\nP1014\n10\n\n\n\n\n\n\nLeft Join\n\nSELECT department_name, last_name, project_number\nFROM ex.departments d\n    LEFT JOIN ex.employees e\n        ON d.department_number = e.department_number\n    LEFT JOIN ex.projects p\n        ON e.employee_id = p.employee_id\nORDER BY department_name, last_name\n\n\n8 records\n\n\ndepartment_name\nlast_name\nproject_number\n\n\n\n\nAccounting\nHernandez\nP1011\n\n\nMaintenance\nHardy\nNA\n\n\nOperations\nNA\nNA\n\n\nPayroll\nAaronsen\nP1012\n\n\nPayroll\nSimonian\nP1012\n\n\nPayroll\nSmith\nP1012\n\n\nPersonnel\nJones\nNA\n\n\nPersonnel\nO’Leary\nP1011\n\n\n\n\n\n\n\nRight Join\n\nSELECT department_name, e.department_number, last_name\nFROM ex.departments d \n    RIGHT JOIN ex.employees e\n    ON d.department_number = e.department_number\nORDER BY department_name\n\n\n9 records\n\n\ndepartment_name\ndepartment_number\nlast_name\n\n\n\n\nNA\n6\nWatson\n\n\nNA\n6\nLocario\n\n\nAccounting\n1\nHernandez\n\n\nMaintenance\n5\nHardy\n\n\nPayroll\n2\nSmith\n\n\nPayroll\n2\nSimonian\n\n\nPayroll\n2\nAaronsen\n\n\nPersonnel\n4\nJones\n\n\nPersonnel\n4\nO’Leary\n\n\n\n\n\ncombine different join types:\n\nSELECT department_name, last_name, project_number\nFROM ex.departments d\n    INNER JOIN ex.employees e\n        ON d.department_number = e.department_number\n    LEFT JOIN ex.projects p\n        ON e.employee_id = p.employee_id\nORDER BY department_name, last_name\n\n\n7 records\n\n\ndepartment_name\nlast_name\nproject_number\n\n\n\n\nAccounting\nHernandez\nP1011\n\n\nMaintenance\nHardy\nNA\n\n\nPayroll\nAaronsen\nP1012\n\n\nPayroll\nSimonian\nP1012\n\n\nPayroll\nSmith\nP1012\n\n\nPersonnel\nJones\nNA\n\n\nPersonnel\nO’Leary\nP1011\n\n\n\n\n\n\n\nCross Join\nIt creates all combinations of rows from different tables.\ntables overview:\n\nSELECT *\nFROM ex.departments\nLIMIT 10\n\n\n5 records\n\n\ndepartment_number\ndepartment_name\n\n\n\n\n1\nAccounting\n\n\n2\nPayroll\n\n\n3\nOperations\n\n\n4\nPersonnel\n\n\n5\nMaintenance\n\n\n\n\n\n\nSELECT *\nFROM ex.employees \nLIMIT 10\n\n\n9 records\n\n\nemployee_id\nlast_name\nfirst_name\ndepartment_number\nmanager_id\n\n\n\n\n1\nSmith\nCindy\n2\nNA\n\n\n2\nJones\nElmer\n4\n1\n\n\n3\nSimonian\nRalph\n2\n2\n\n\n4\nHernandez\nOlivia\n1\n9\n\n\n5\nAaronsen\nRobert\n2\n4\n\n\n6\nWatson\nDenise\n6\n8\n\n\n7\nHardy\nThomas\n5\n2\n\n\n8\nO’Leary\nRhea\n4\n9\n\n\n9\nLocario\nPaulo\n6\n1\n\n\n\n\n\ncross join:\n\nSELECT departments.department_number, department_name,\n    employee_id, last_name\nFROM ex.departments CROSS JOIN ex.employees\nORDER BY departments.department_number\n\n\nDisplaying records 1 - 15\n\n\ndepartment_number\ndepartment_name\nemployee_id\nlast_name\n\n\n\n\n1\nAccounting\n9\nLocario\n\n\n1\nAccounting\n1\nSmith\n\n\n1\nAccounting\n8\nO’Leary\n\n\n1\nAccounting\n4\nHernandez\n\n\n1\nAccounting\n2\nJones\n\n\n1\nAccounting\n7\nHardy\n\n\n1\nAccounting\n5\nAaronsen\n\n\n1\nAccounting\n3\nSimonian\n\n\n1\nAccounting\n6\nWatson\n\n\n2\nPayroll\n9\nLocario\n\n\n2\nPayroll\n4\nHernandez\n\n\n2\nPayroll\n1\nSmith\n\n\n2\nPayroll\n8\nO’Leary\n\n\n2\nPayroll\n2\nJones\n\n\n2\nPayroll\n7\nHardy\n\n\n\n\n\n\n\nUnion\nThis is essentially stacking different intermediate table results one on top of another:\n\nEach result set must return the same number of columns.\nThe corresponding columns in each result set must have compatible data types.\nThe column names in the final result set are taken from the first SELECT clause.\n\n\nSELECT 'Active' AS source, \n  invoice_number, \n  invoice_date, \n  invoice_total\nFROM ex.active_invoices\nWHERE invoice_date &gt;= '2022-06-01'\n\nUNION\n\nSELECT 'Paid' AS source, \n  invoice_number, \n  invoice_date, \n  invoice_total\nFROM ex.paid_invoices\nWHERE invoice_date &gt;= '2022-06-01'\nORDER BY invoice_total DESC\n\n\nDisplaying records 1 - 15\n\n\nsource\ninvoice_number\ninvoice_date\ninvoice_total\n\n\n\n\nActive\n40318\n2022-07-18\n21842.00\n\n\nPaid\nP02-3772\n2022-06-03\n7125.34\n\n\nPaid\n10843\n2022-06-04\n4901.26\n\n\nPaid\n77290\n2022-06-04\n1750.00\n\n\nPaid\nRTR-72-3662-X\n2022-06-04\n1600.00\n\n\nPaid\n75C-90227\n2022-06-06\n1367.50\n\n\nPaid\nP02-88D77S7\n2022-06-06\n856.92\n\n\nActive\nI77271-O01\n2022-06-05\n662.00\n\n\nActive\n9982771\n2022-06-03\n503.20\n\n\nPaid\n121897\n2022-06-01\n450.00\n\n\nPaid\nCBM9920-M-T77109\n2022-06-07\n290.00\n\n\nPaid\n133560\n2022-06-01\n175.00\n\n\nActive\n134116\n2022-06-01\n90.36\n\n\nActive\n39104\n2022-06-20\n85.31\n\n\nActive\n111-92R-10092\n2022-06-04\n46.21\n\n\n\n\n\n\n\nFull Outer Join\nA combination of left outer join and right outer join.\nThere is no keywords in MySQL to do full outer join directly. Other SQL dialects might have (e.g. T-SQL has FULL (OUTER) JOIN)\nin MySQL it is literally a UNION of LEFT JOIN set and RIGHT JOIN set\n\nSELECT department_name AS dept_name,\n        d.department_number AS d_dept_no,\n        e.department_number AS e_dept_no, last_name\nFROM ex.departments d \n     LEFT JOIN ex.employees e \n     ON d.department_number = e.department_number\n\nUNION\n\nSELECT department_name AS dept_name,\n       d.department_number AS d_dept_no,\n       e.department_number AS e_dept_no, last_name\nFROM ex.departments d \n    RIGHT JOIN ex.employees e \n    ON d.department_number = e.department_number\n\nORDER BY dept_name\n\n\n10 records\n\n\ndept_name\nd_dept_no\ne_dept_no\nlast_name\n\n\n\n\nNA\nNA\n6\nWatson\n\n\nNA\nNA\n6\nLocario\n\n\nAccounting\n1\n1\nHernandez\n\n\nMaintenance\n5\n5\nHardy\n\n\nOperations\n3\nNA\nNA\n\n\nPayroll\n2\n2\nAaronsen\n\n\nPayroll\n2\n2\nSimonian\n\n\nPayroll\n2\n2\nSmith\n\n\nPersonnel\n4\n4\nO’Leary\n\n\nPersonnel\n4\n4\nJones",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Retrieve Data from 2 or More Tables</span>"
    ]
  },
  {
    "objectID": "MySQL_5_Summary_Queries.html",
    "href": "MySQL_5_Summary_Queries.html",
    "title": "3  Grouping Data and Summary Queries",
    "section": "",
    "text": "3.1 Reference\nDefault database in this chapter is “ap”.\nOther databases included in the simulation MySQL server:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grouping Data and Summary Queries</span>"
    ]
  },
  {
    "objectID": "MySQL_5_Summary_Queries.html#reference",
    "href": "MySQL_5_Summary_Queries.html#reference",
    "title": "3  Grouping Data and Summary Queries",
    "section": "",
    "text": "om\nex",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grouping Data and Summary Queries</span>"
    ]
  },
  {
    "objectID": "MySQL_5_Summary_Queries.html#aggregated-functions",
    "href": "MySQL_5_Summary_Queries.html#aggregated-functions",
    "title": "3  Grouping Data and Summary Queries",
    "section": "3.2 Aggregated Functions",
    "text": "3.2 Aggregated Functions\nThese are tools to calculate common summarized statistics, usually used when aggregate records to a lower granularity, hence the name “Aggregated”.\nA full list of aggregated functions from MySQL can be found here.\nHere is an example of getting a variety of summary stats about invoices with amount outstanding:\n\nSELECT COUNT(*) AS number_of_invoices,\n    COUNT(DISTINCT vendor_id) AS number_of_vendors,\n    SUM(invoice_total - payment_total - credit_total) AS total_due,\n    MAX(invoice_total - payment_total - credit_total) AS highest_invoice_due,\n    MIN(invoice_total - payment_total - credit_total) AS lowest_invoice_due\nFROM ap.invoices\nWHERE invoice_total - payment_total - credit_total &gt; 0\n\n\n1 records\n\n\n\n\n\n\n\n\n\nnumber_of_invoices\nnumber_of_vendors\ntotal_due\nhighest_invoice_due\nlowest_invoice_due\n\n\n\n\n11\n7\n32020.42\n19351.18\n30.75\n\n\n\n\n\nMIN(), MAX() can also be used to work with non-numeric values. They are essentially shortcut to:\n\nMIN(): sort the column values in ascending order, and take the first value (such as a from a-z, or the earliest date)\nMAX(): sort the column values in ascending order, and take the last value (such as z from a-z, or the latest date)\n\n\nSELECT MIN(vendor_name) AS first_vendor,\n    MAX(vendor_name) AS last_vendor,\n    COUNT(vendor_name) AS number_of_vendors\nFROM ap.vendors\n\n\n1 records\n\n\nfirst_vendor\nlast_vendor\nnumber_of_vendors\n\n\n\n\nAbbey Office Furnishings\nZylka Design\n122",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grouping Data and Summary Queries</span>"
    ]
  },
  {
    "objectID": "MySQL_5_Summary_Queries.html#grouping-data-group-by",
    "href": "MySQL_5_Summary_Queries.html#grouping-data-group-by",
    "title": "3  Grouping Data and Summary Queries",
    "section": "3.3 Grouping Data: GROUP BY",
    "text": "3.3 Grouping Data: GROUP BY\nGrouping: the server treats the target table as if it is subset by each unique combination of values.\nThis is useful when you need to calculate or perform operations for each of those subset independently and then combine them back to a single table.\nThe following is a good example:\n\nit treats all records by each value in vendor_id separately;\nit calculates average invoice amount with invoice records by each vendor_id;\nit subsets, based on average of invoice_total greater than 2000;\nfinally, it sorts the final output by calculated average amount.\n\nIMPORTANT:\nYou cannot use WHERE for aggregated results from grouped operations.\n\nSELECT vendor_id, ROUND(AVG(invoice_total), 2) AS average_invoice_amount\nFROM ap.invoices\nGROUP BY vendor_id\nHAVING AVG(invoice_total) &gt; 2000\nORDER BY average_invoice_amount DESC\n\n\n8 records\n\n\nvendor_id\naverage_invoice_amount\n\n\n\n\n110\n23978.48\n\n\n72\n10963.66\n\n\n104\n7125.34\n\n\n99\n6940.25\n\n\n119\n4901.26\n\n\n122\n2575.33\n\n\n86\n2433.00\n\n\n100\n2184.50\n\n\n\n\n\nHowever, you can continue using WHERE to subset on non-aggregated fields/dimensions. For example:\n\nSELECT \n    invoice_date,\n    COUNT(*) AS invoice_qty,\n    SUM(invoice_total) AS invoice_sum\nFROM invoices\nWHERE invoice_date BETWEEN '2022-06-01' AND '2022-06-30'\nGROUP BY invoice_date\nHAVING COUNT(*) &gt; 1 \n    AND SUM(invoice_total) &gt; 100\nORDER BY invoice_date DESC\n\n\n8 records\n\n\ninvoice_date\ninvoice_qty\ninvoice_sum\n\n\n\n\n2022-06-24\n3\n309.80\n\n\n2022-06-22\n4\n299.50\n\n\n2022-06-18\n2\n6972.20\n\n\n2022-06-11\n4\n3867.50\n\n\n2022-06-10\n2\n354.30\n\n\n2022-06-09\n2\n1129.79\n\n\n2022-06-03\n3\n1832.00\n\n\n2022-06-01\n3\n24627.03\n\n\n\n\n\nIt also works with table joined to the target home table:\n\nSELECT vendor_state, vendor_city, COUNT(*) AS invoice_qty,\n    ROUND(AVG(invoice_total), 2) AS invoice_avg\nFROM ap.invoices JOIN ap.vendors\n    ON invoices.vendor_id = vendors.vendor_id\nGROUP BY vendor_state, vendor_city\nORDER BY vendor_state, vendor_city\n\n\nDisplaying records 1 - 15\n\n\nvendor_state\nvendor_city\ninvoice_qty\ninvoice_avg\n\n\n\n\nAZ\nPhoenix\n1\n662.00\n\n\nCA\nFresno\n19\n1208.75\n\n\nCA\nLos Angeles\n1\n503.20\n\n\nCA\nOxnard\n3\n188.00\n\n\nCA\nPasadena\n5\n196.12\n\n\nCA\nSacramento\n7\n253.00\n\n\nCA\nSan Francisco\n3\n1211.04\n\n\nCA\nTurlock\n1\n95.00\n\n\nCA\nValencia\n1\n6940.25\n\n\nDC\nWashington\n1\n600.00\n\n\nMA\nBoston\n1\n1367.50\n\n\nMI\nAnn Arbor\n5\n23978.48\n\n\nMI\nAuburn Hills\n2\n10963.66\n\n\nNV\nReno\n9\n2575.33\n\n\nNV\nThe Lake\n1\n2184.50\n\n\n\n\n\n\nSummary Row: WITH ROLLUP\nWITH ROLLUP keywords allow you to add a summary row at the end of each group.\nSee the following example: we obtain the last few rows of aggregated results and an aggregated line of summary:\n\nfor each value of vendor_state\nfor overall level\n\n\nSELECT vendor_state, vendor_city, COUNT(*) AS qty_vendors\nFROM ap.vendors\nWHERE vendor_state IN ('IA', 'NJ')\nGROUP BY vendor_state, vendor_city WITH ROLLUP\n\n\n8 records\n\n\nvendor_state\nvendor_city\nqty_vendors\n\n\n\n\nIA\nFairfield\n1\n\n\nIA\nWashington\n1\n\n\nIA\nNA\n2\n\n\nNJ\nEast Brunswick\n2\n\n\nNJ\nFairfield\n1\n\n\nNJ\nWashington\n1\n\n\nNJ\nNA\n4\n\n\nNA\nNA\n6\n\n\n\n\n\n\n\nSummary Row with Level Control: GROUPING()\nThe best way to see what GROUPING() does, is to see the following examples.\nFirst, let’s what GROUPING() with different variables produces:\n\nSELECT vendor_state,\n  vendor_city,\n  vendor_zip_code,\n  COUNT(*) AS qty_vendors,\n  GROUPING(vendor_state), \n  GROUPING(vendor_city), \n  GROUPING(vendor_state, vendor_city),\n  GROUPING(vendor_state, vendor_zip_code),\n  GROUPING(vendor_city, vendor_zip_code),\n  GROUPING(vendor_state, vendor_city, vendor_zip_code)\nFROM ap.vendors\nWHERE vendor_state IN ('IA', 'NJ')\nGROUP BY vendor_state, vendor_city, vendor_zip_code WITH ROLLUP\n\n\n14 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvendor_state\nvendor_city\nvendor_zip_code\nqty_vendors\nGROUPING(vendor_state)\nGROUPING(vendor_city)\nGROUPING(vendor_state, vendor_city)\nGROUPING(vendor_state, vendor_zip_code)\nGROUPING(vendor_city, vendor_zip_code)\nGROUPING(vendor_state, vendor_city, vendor_zip_code)\n\n\n\n\nIA\nFairfield\n52556\n1\n0\n0\n0\n0\n0\n0\n\n\nIA\nFairfield\nNA\n1\n0\n0\n0\n1\n1\n1\n\n\nIA\nWashington\n52353\n1\n0\n0\n0\n0\n0\n0\n\n\nIA\nWashington\nNA\n1\n0\n0\n0\n1\n1\n1\n\n\nIA\nNA\nNA\n2\n0\n1\n1\n1\n3\n3\n\n\nNJ\nEast Brunswick\n08810\n1\n0\n0\n0\n0\n0\n0\n\n\nNJ\nEast Brunswick\n08816\n1\n0\n0\n0\n0\n0\n0\n\n\nNJ\nEast Brunswick\nNA\n2\n0\n0\n0\n1\n1\n1\n\n\nNJ\nFairfield\n07004\n1\n0\n0\n0\n0\n0\n0\n\n\nNJ\nFairfield\nNA\n1\n0\n0\n0\n1\n1\n1\n\n\nNJ\nWashington\n07882\n1\n0\n0\n0\n0\n0\n0\n\n\nNJ\nWashington\nNA\n1\n0\n0\n0\n1\n1\n1\n\n\nNJ\nNA\nNA\n4\n0\n1\n1\n1\n3\n3\n\n\nNA\nNA\nNA\n6\n1\n1\n3\n3\n3\n7\n\n\n\n\n\nThis can help us to easily identify rollup rows at different levels and then to create friendly labels at each level:\n\nSELECT \n  IF(GROUPING(vendor_state) = 1, 'Vendor_State_Count', vendor_state) AS vendor_state,\n  IF(GROUPING(vendor_city) = 1, 'Vendor_City_Count', vendor_city) AS vendor_city,\n  COUNT(*) AS qty_vendors\nFROM ap.vendors\nWHERE vendor_state IN ('IA', 'NJ')\nGROUP BY vendor_state, vendor_city WITH ROLLUP\n\n\n8 records\n\n\nvendor_state\nvendor_city\nqty_vendors\n\n\n\n\nIA\nFairfield\n1\n\n\nIA\nWashington\n1\n\n\nIA\nVendor_City_Count\n2\n\n\nNJ\nEast Brunswick\n2\n\n\nNJ\nFairfield\n1\n\n\nNJ\nWashington\n1\n\n\nNJ\nVendor_City_Count\n4\n\n\nVendor_State_Count\nVendor_City_Count\n6\n\n\n\n\n\nIf you want to see rollup rows only:\n\nSELECT \n  IF(GROUPING(vendor_state) = 1, 'Vendor_State_Count', vendor_state) AS vendor_state,\n  IF(GROUPING(vendor_city) = 1, 'Vendor_City_Count', vendor_city) AS vendor_city,\n  COUNT(*) AS qty_vendors\nFROM ap.vendors\nWHERE vendor_state IN ('IA', 'NJ')\nGROUP BY vendor_state, vendor_city WITH ROLLUP\nHAVING GROUPING(vendor_state) = 1 OR GROUPING(vendor_city) = 1\n\n\n3 records\n\n\nvendor_state\nvendor_city\nqty_vendors\n\n\n\n\nIA\nVendor_City_Count\n2\n\n\nNJ\nVendor_City_Count\n4\n\n\nVendor_State_Count\nVendor_City_Count\n6",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grouping Data and Summary Queries</span>"
    ]
  },
  {
    "objectID": "MySQL_5_Summary_Queries.html#window-over-partition-by",
    "href": "MySQL_5_Summary_Queries.html#window-over-partition-by",
    "title": "3  Grouping Data and Summary Queries",
    "section": "3.4 Window: OVER(), PARTITION BY",
    "text": "3.4 Window: OVER(), PARTITION BY\nWhat if you would like to create grouping effect but you don’t want to lose any granularity of data? This is where “window” concept cuts in. OVER() function creates a window, with PARTITION BY specifies the “grouping effect” for the windows to be created.\nThe following example creates a sum of invoice_total at different levels. Notice that:\n\ntotal_invoices: created with nothing in OVER(), it will just create a column of sum value\nvendor_total: created with PARTITION BY in OVER(), it will create subtotals by each value of vendor_id\nyou don’t lose any granularity of the data, you can still choose all the columns from invoices table that you wish to include.\nyou can still use WHERE to subset for target table.\n\n\nSELECT vendor_id,\n  invoice_date,\n  invoice_total,\n  SUM(invoice_total) OVER() AS total_invoices,\n  SUM(invoice_total) OVER(PARTITION BY vendor_id) AS vendor_total\nFROM ap.invoices\nWHERE invoice_total &gt; 5000\n\n\n8 records\n\n\nvendor_id\ninvoice_date\ninvoice_total\ntotal_invoices\nvendor_total\n\n\n\n\n72\n2022-06-01\n21842.00\n155800\n21842.00\n\n\n99\n2022-06-18\n6940.25\n155800\n6940.25\n\n\n104\n2022-05-21\n7125.34\n155800\n7125.34\n\n\n110\n2022-05-28\n37966.19\n155800\n119892.41\n\n\n110\n2022-07-19\n26881.40\n155800\n119892.41\n\n\n110\n2022-07-23\n20551.18\n155800\n119892.41\n\n\n110\n2022-07-24\n23517.58\n155800\n119892.41\n\n\n110\n2022-07-31\n10976.06\n155800\n119892.41\n\n\n\n\n\n\nRunning Windows: OVER(), PARTITION BY, ORDER BY\nComparing with the above, with ORDER BY added, we are now calculating running total for each vendor as each invoice being issued for the same vendor.\n“ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW”: determines the running total behaviour. It says operations performed for all rows up to this current row. See window function for vendor_id 110 in action.\n\nSELECT \n  vendor_id,\n  invoice_date,\n  invoice_total,\n  SUM(invoice_total) OVER() AS total_invoices,\n  SUM(invoice_total) OVER(PARTITION BY vendor_id\n    ORDER BY invoice_date\n    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS vendor_total\nFROM ap.invoices\nWHERE invoice_total &gt; 5000\n\n\n8 records\n\n\nvendor_id\ninvoice_date\ninvoice_total\ntotal_invoices\nvendor_total\n\n\n\n\n72\n2022-06-01\n21842.00\n155800\n21842.00\n\n\n99\n2022-06-18\n6940.25\n155800\n6940.25\n\n\n104\n2022-05-21\n7125.34\n155800\n7125.34\n\n\n110\n2022-05-28\n37966.19\n155800\n37966.19\n\n\n110\n2022-07-19\n26881.40\n155800\n64847.59\n\n\n110\n2022-07-23\n20551.18\n155800\n85398.77\n\n\n110\n2022-07-24\n23517.58\n155800\n108916.35\n\n\n110\n2022-07-31\n10976.06\n155800\n119892.41\n\n\n\n\n\nYou can modify the “width” of the window. See the following:\n\nROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING: allows you to use 1 row up (if any) and 1 row down (if any) relative to the current row to make calculation. Obviously you can change to any numbers as you wish.\nNow it calculates the average invoice total amounts based on rolling 3 invoice_dates.\n\n\nSELECT vendor_id,\n  invoice_date,\n  invoice_total,\n  SUM(invoice_total) OVER() AS total_invoices,\n  ROUND(AVG(invoice_total) OVER(PARTITION BY vendor_id \n    ORDER BY invoice_date \n    ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING), 2) AS vendor_total\nFROM ap.invoices\nWHERE invoice_total &gt; 5000\n\n\n8 records\n\n\nvendor_id\ninvoice_date\ninvoice_total\ntotal_invoices\nvendor_total\n\n\n\n\n72\n2022-06-01\n21842.00\n155800\n21842.00\n\n\n99\n2022-06-18\n6940.25\n155800\n6940.25\n\n\n104\n2022-05-21\n7125.34\n155800\n7125.34\n\n\n110\n2022-05-28\n37966.19\n155800\n32423.80\n\n\n110\n2022-07-19\n26881.40\n155800\n28466.26\n\n\n110\n2022-07-23\n20551.18\n155800\n23650.05\n\n\n110\n2022-07-24\n23517.58\n155800\n18348.27\n\n\n110\n2022-07-31\n10976.06\n155800\n17246.82\n\n\n\n\n\nIf you need to modify the window based on range of a value you can use RANGE instead of ROW keyword.\nThe following specifies the window to be based on invoice_date and treat a day before and a day after as the same range. (See vendor_id 110 and between 2022-07-19 and 2022-07-31):\n\nSELECT vendor_id,\n  invoice_date,\n  invoice_total,\n  SUM(invoice_total) OVER() AS total_invoices,\n  SUM(invoice_total) OVER(PARTITION BY vendor_id \n    ORDER BY invoice_date \n    RANGE BETWEEN INTERVAL 1 DAY PRECEDING AND INTERVAL 1 DAY FOLLOWING) AS vendor_total\nFROM ap.invoices\nWHERE invoice_total &gt; 5000\n\n\n8 records\n\n\nvendor_id\ninvoice_date\ninvoice_total\ntotal_invoices\nvendor_total\n\n\n\n\n72\n2022-06-01\n21842.00\n155800\n21842.00\n\n\n99\n2022-06-18\n6940.25\n155800\n6940.25\n\n\n104\n2022-05-21\n7125.34\n155800\n7125.34\n\n\n110\n2022-05-28\n37966.19\n155800\n37966.19\n\n\n110\n2022-07-19\n26881.40\n155800\n26881.40\n\n\n110\n2022-07-23\n20551.18\n155800\n44068.76\n\n\n110\n2022-07-24\n23517.58\n155800\n44068.76\n\n\n110\n2022-07-31\n10976.06\n155800\n10976.06\n\n\n\n\n\n\n\nCreate Row Index\nThe following creates row_number for each group by vendor_state:\n\nSELECT\n  ROW_NUMBER() OVER(PARTITION BY vendor_state ORDER BY vendor_name) AS 'row_number',\n  vendor_name,\n  vendor_state\nFROM ap.vendors\n\n\nDisplaying records 1 - 15\n\n\nrow_number\nvendor_name\nvendor_state\n\n\n\n\n1\nAT&T\nAZ\n\n\n2\nComputer Library\nAZ\n\n\n3\nWells Fargo Bank\nAZ\n\n\n1\nAbbey Office Furnishings\nCA\n\n\n2\nAmerican Express\nCA\n\n\n3\nASC Signs\nCA\n\n\n4\nAztek Label\nCA\n\n\n5\nBertelsmann Industry Svcs. Inc\nCA\n\n\n6\nBFI Industries\nCA\n\n\n7\nBill Jones\nCA\n\n\n8\nBill Marvin Electric Inc\nCA\n\n\n9\nBlanchard & Johnson Associates\nCA\n\n\n10\nBlue Cross\nCA\n\n\n11\nBlue Shield of California\nCA\n\n\n12\nCal State Termite\nCA\n\n\n\n\n\nThe following compares the differences among rankings and row index:\n\nSELECT \n  vendor_id,\n  invoice_total,\n  invoice_number,\n  ROW_NUMBER() OVER (PARTITION BY vendor_id ORDER BY invoice_total) AS 'row_id', \n  RANK() OVER (PARTITION BY vendor_id ORDER BY invoice_total) AS 'rank', \n  DENSE_RANK() OVER (PARTITION BY vendor_id ORDER BY invoice_total) AS 'dense_rank'\nFROM ap.invoices\n\n\nDisplaying records 1 - 15\n\n\nvendor_id\ninvoice_total\ninvoice_number\nrow_id\nrank\ndense_rank\n\n\n\n\n34\n116.54\nQP58872\n1\n1\n1\n\n\n34\n1083.58\nQ545443\n2\n2\n2\n\n\n37\n116.00\n547479217\n1\n1\n1\n\n\n37\n224.00\n547481328\n2\n2\n2\n\n\n37\n224.00\n547480102\n3\n2\n2\n\n\n48\n856.92\nP02-88D77S7\n1\n1\n1\n\n\n72\n85.31\n39104\n1\n1\n1\n\n\n72\n21842.00\n40318\n2\n2\n2\n\n\n80\n90.36\n134116\n1\n1\n1\n\n\n80\n175.00\n133560\n2\n2\n2\n\n\n81\n936.93\nMABO1489\n1\n1\n1\n\n\n82\n600.00\nC73-24\n1\n1\n1\n\n\n83\n579.42\n31361833\n1\n1\n1\n\n\n83\n1575.00\n31359783\n2\n2\n2\n\n\n86\n2433.00\n367447\n1\n1\n1\n\n\n\n\n\n\n\nCreate Lags and Leads\nLAG(): Allows to “push each record down” and lines up the current row value with the value from last row. LEAD(): Allows to “pull each record up” and lines up the current row value with the value from next row.\nThese are useful to compare results for year over year, month over month etc.\nAlso notice here that “WINDOW” clause allows to create alias of a particular type of window, so you don’t have to repeat the specifications for OVER() each time.\n\nSELECT \n  rep_id, \n  sales_year,\n  -- lag series\n  sales_total AS current_sales,\n  LAG(sales_total, 1, 0) OVER rep_window AS last_sales,\n  Sales_total - LAG(sales_total, 1, 0) OVER rep_window AS change_from_last,\n  -- lead series\n  sales_total AS current_sales_again,\n  LEAD(sales_total, 1, 0) OVER rep_window AS next_sales,\n  LEAD(sales_total, 1, 0) OVER rep_window - Sales_total AS change_from_current\nFROM ex.sales_totals\nWINDOW rep_window AS (PARTITION BY rep_id ORDER BY sales_year)\n\n\n12 records\n\n\n\n\n\n\n\n\n\n\n\n\nrep_id\nsales_year\ncurrent_sales\nlast_sales\nchange_from_last\ncurrent_sales_again\nnext_sales\nchange_from_current\n\n\n\n\n1\n2020\n1274856.38\n0.0\n1274856.38\n1274856.38\n923746.85\n-351109.53\n\n\n1\n2021\n923746.85\n1274856.4\n-351109.53\n923746.85\n998337.46\n74590.61\n\n\n1\n2022\n998337.46\n923746.8\n74590.61\n998337.46\n0.00\n-998337.46\n\n\n2\n2020\n978465.99\n0.0\n978465.99\n978465.99\n974853.81\n-3612.18\n\n\n2\n2021\n974853.81\n978466.0\n-3612.18\n974853.81\n887695.75\n-87158.06\n\n\n2\n2022\n887695.75\n974853.8\n-87158.06\n887695.75\n0.00\n-887695.75\n\n\n3\n2020\n1032875.48\n0.0\n1032875.48\n1032875.48\n1132744.56\n99869.08\n\n\n3\n2021\n1132744.56\n1032875.5\n99869.08\n1132744.56\n0.00\n-1132744.56\n\n\n4\n2021\n655786.92\n0.0\n655786.92\n655786.92\n72443.37\n-583343.55\n\n\n4\n2022\n72443.37\n655786.9\n-583343.55\n72443.37\n0.00\n-72443.37\n\n\n5\n2021\n422847.86\n0.0\n422847.86\n422847.86\n45182.44\n-377665.42\n\n\n5\n2022\n45182.44\n422847.9\n-377665.42\n45182.44\n0.00\n-45182.44",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grouping Data and Summary Queries</span>"
    ]
  },
  {
    "objectID": "MySQL_6_Subqueries.html",
    "href": "MySQL_6_Subqueries.html",
    "title": "4  Subqueries",
    "section": "",
    "text": "4.1 Reference\nDefault database in this chapter is “ap”.\nOther databases included in the simulation MySQL server:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Subqueries</span>"
    ]
  },
  {
    "objectID": "MySQL_6_Subqueries.html#reference",
    "href": "MySQL_6_Subqueries.html#reference",
    "title": "4  Subqueries",
    "section": "",
    "text": "om\nex",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Subqueries</span>"
    ]
  },
  {
    "objectID": "MySQL_6_Subqueries.html#subqueries",
    "href": "MySQL_6_Subqueries.html#subqueries",
    "title": "4  Subqueries",
    "section": "4.2 Subqueries",
    "text": "4.2 Subqueries\n\nWhat\nSometimes we want to express complex logic as part of the main query and wish that we could just write another standalone query for that logic.\nExample: in WHERE or HAVING clause, we want to match/exclude only a specific set of values from another table that involves more complex subsetting in its own.\n\n\nWhy\n\nMore clear description of what complex logic taking place outside of main query.\nMore possibilities and flexibility to query data within one main query.\n\n\n\nExample\nThe following subquery (getting vendor_id from vendors table where vendor_state is California) allows us subset invoices table based on vendor criteria in vendors table.\nAs you can imagine, if we need more complicated logic to subset for vendor_id, we can specify more in WHERE clause in the subquery. - much more expressive and telling how we select vendor_ids - more flexible if we need to add more logic/other operations in vendors table\n\nSELECT invoice_number, invoice_date, invoice_total\nFROM invoices\nWHERE vendor_id IN\n    (SELECT vendor_id\n     FROM vendors\n     WHERE vendor_state = 'CA')\nORDER BY invoice_date\nLIMIT 15\n\n\nDisplaying records 1 - 15\n\n\ninvoice_number\ninvoice_date\ninvoice_total\n\n\n\n\n125520-1\n2022-04-24\n95.00\n\n\n97/488\n2022-04-24\n601.95\n\n\n111-92R-10096\n2022-04-30\n16.33\n\n\n25022117\n2022-05-01\n6.00\n\n\nP02-88D77S7\n2022-05-03\n856.92\n\n\nQP58872\n2022-05-07\n116.54\n\n\n24863706\n2022-05-10\n6.00\n\n\n10843\n2022-05-11\n4901.26\n\n\n77290\n2022-05-13\n1750.00\n\n\n121897\n2022-05-19\n450.00\n\n\nP02-3772\n2022-05-21\n7125.34\n\n\n97/486\n2022-05-21\n953.10\n\n\n94007005\n2022-05-23\n220.00\n\n\nRTR-72-3662-X\n2022-05-25\n1600.00\n\n\n97/465\n2022-05-25\n565.15",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Subqueries</span>"
    ]
  },
  {
    "objectID": "MySQL_6_Subqueries.html#use-cases",
    "href": "MySQL_6_Subqueries.html#use-cases",
    "title": "4  Subqueries",
    "section": "4.3 Use Cases",
    "text": "4.3 Use Cases\n\nCompare with an Aggregated Result\nHere we want to retrieve all invoice records:\n\nwith balance due &gt; 0\nwith balance_due below average of outstanding balance due\n\nFirst, let’s see what average balance due looks like:\n\nSELECT AVG(invoice_total - payment_total - credit_total)\nFROM invoices\nWHERE invoice_total - payment_total - credit_total &gt; 0\n\n\n1 records\n\n\nAVG(invoice_total - payment_total - credit_total)\n\n\n\n\n2910.947\n\n\n\n\n\nSecond, let’s see what invoices balance due look like:\n\nSELECT invoice_number, invoice_date, \n    invoice_total - payment_total - credit_total AS balance_due\nFROM invoices\nORDER BY balance_due DESC\nLIMIT 15\n\n\nDisplaying records 1 - 15\n\n\ninvoice_number\ninvoice_date\nbalance_due\n\n\n\n\nP-0608\n2022-07-23\n19351.18\n\n\n0-2436\n2022-07-31\n10976.06\n\n\n31361833\n2022-07-21\n579.42\n\n\n9982771\n2022-07-24\n503.20\n\n\n547480102\n2022-08-01\n224.00\n\n\n134116\n2022-07-28\n90.36\n\n\n39104\n2022-07-10\n85.31\n\n\n263253270\n2022-07-22\n67.92\n\n\n263253268\n2022-07-21\n59.97\n\n\n963253264\n2022-07-18\n52.25\n\n\n263253273\n2022-07-22\n30.75\n\n\n963253249\n2022-08-02\n0.00\n\n\n963253251\n2022-04-16\n0.00\n\n\n963253261\n2022-04-16\n0.00\n\n\nI77271-O01\n2022-04-26\n0.00\n\n\n\n\n\nThird, let’s see what invoices below average balance due look like:\n\nSELECT invoice_number, invoice_date, \n    invoice_total - payment_total - credit_total AS balance_due\nFROM invoices\nWHERE invoice_total - payment_total - credit_total &lt;\n    (\n     SELECT AVG(invoice_total - payment_total - credit_total)\n     FROM invoices\n     WHERE invoice_total - payment_total - credit_total &gt; 0\n    )\nORDER BY balance_due DESC\n\n\nDisplaying records 1 - 15\n\n\ninvoice_number\ninvoice_date\nbalance_due\n\n\n\n\n31361833\n2022-07-21\n579.42\n\n\n9982771\n2022-07-24\n503.20\n\n\n547480102\n2022-08-01\n224.00\n\n\n134116\n2022-07-28\n90.36\n\n\n39104\n2022-07-10\n85.31\n\n\n263253270\n2022-07-22\n67.92\n\n\n263253268\n2022-07-21\n59.97\n\n\n963253264\n2022-07-18\n52.25\n\n\n263253273\n2022-07-22\n30.75\n\n\n989319-457\n2022-04-08\n0.00\n\n\n263253241\n2022-04-10\n0.00\n\n\n963253234\n2022-04-13\n0.00\n\n\n2-000-2993\n2022-04-16\n0.00\n\n\n963253251\n2022-04-16\n0.00\n\n\n963253261\n2022-04-16\n0.00\n\n\n\n\n\nLastly, filter out all of the invoices without any balance due:\n\nSELECT invoice_number, invoice_date, \n    invoice_total - payment_total - credit_total AS balance_due\nFROM invoices\nWHERE invoice_total - payment_total - credit_total &lt;\n    (\n     SELECT AVG(invoice_total - payment_total - credit_total)\n     FROM invoices\n     WHERE invoice_total - payment_total - credit_total &gt; 0\n    ) AND invoice_total - payment_total - credit_total &gt; 0\nORDER BY balance_due DESC\n\n\n9 records\n\n\ninvoice_number\ninvoice_date\nbalance_due\n\n\n\n\n31361833\n2022-07-21\n579.42\n\n\n9982771\n2022-07-24\n503.20\n\n\n547480102\n2022-08-01\n224.00\n\n\n134116\n2022-07-28\n90.36\n\n\n39104\n2022-07-10\n85.31\n\n\n263253270\n2022-07-22\n67.92\n\n\n263253268\n2022-07-21\n59.97\n\n\n963253264\n2022-07-18\n52.25\n\n\n263253273\n2022-07-22\n30.75\n\n\n\n\n\n\n\nCommon Table Expressions (CTE)\n\nIntroduction\nCTE allows you to assign nicknames for the output of your subqueries and then use the nicknames to go on to finish the main query.\nExample, we want to write a query to:\n\nget a vendor from each state\nthis vendor has the highest total invoice amount in that state\nlist all states with highest vendor invoice total in that state, and its vendor name\n\nFirst, let’s get all vendors and their total invoices together:\n\nSELECT vendor_state, \n    vendor_name,\n    invoice_total\nFROM vendors v INNER JOIN invoices i \n    ON v.vendor_id = i.vendor_id\n\n\nDisplaying records 1 - 15\n\n\nvendor_state\nvendor_name\ninvoice_total\n\n\n\n\nNV\nUnited Parcel Service\n3813.33\n\n\nTN\nFederal Express Corporation\n40.20\n\n\nTN\nFederal Express Corporation\n138.75\n\n\nTN\nFederal Express Corporation\n144.70\n\n\nTN\nFederal Express Corporation\n15.50\n\n\nTN\nFederal Express Corporation\n42.75\n\n\nTN\nFederal Express Corporation\n172.50\n\n\nCA\nEvans Executone Inc\n95.00\n\n\nCA\nZylka Design\n601.95\n\n\nTN\nFederal Express Corporation\n42.67\n\n\nTN\nFederal Express Corporation\n42.50\n\n\nAZ\nWells Fargo Bank\n662.00\n\n\nCA\nPacific Bell\n16.33\n\n\nCA\nRoadway Package System, Inc\n6.00\n\n\nCA\nFresno County Tax Collector\n856.92\n\n\n\n\n\nSecond, let’s get total invoice amount by vendors and states\n\nSELECT vendor_state, \n    vendor_name,\n    SUM(invoice_total) AS sum_of_invoices\nFROM vendors v INNER JOIN invoices i \n    ON v.vendor_id = i.vendor_id\nGROUP BY vendor_state, vendor_name\n\n\nDisplaying records 1 - 15\n\n\nvendor_state\nvendor_name\nsum_of_invoices\n\n\n\n\nNV\nUnited Parcel Service\n23177.96\n\n\nTN\nFederal Express Corporation\n4378.02\n\n\nCA\nEvans Executone Inc\n95.00\n\n\nCA\nZylka Design\n6940.25\n\n\nAZ\nWells Fargo Bank\n662.00\n\n\nCA\nPacific Bell\n171.01\n\n\nCA\nRoadway Package System, Inc\n43.67\n\n\nCA\nFresno County Tax Collector\n856.92\n\n\nOH\nCompuserve\n19.90\n\n\nCA\nIBM\n1200.12\n\n\nCA\nYesmed, Inc\n4901.26\n\n\nCA\nPollstar\n1750.00\n\n\nOH\nEdward Data Services\n207.78\n\n\nCA\nGostanian General Building\n450.00\n\n\nCA\nDigital Dreamworks\n7125.34\n\n\n\n\n\nThird, now, we need to create a nickname for this result so that we can base on the result of that query to select the max total invoice amount by state:\n\nWITH summary AS\n\n(SELECT vendor_state, \n    vendor_name,\n    SUM(invoice_total) AS sum_of_invoices\nFROM vendors v INNER JOIN invoices i \n    ON v.vendor_id = i.vendor_id\nGROUP BY vendor_state, vendor_name)\n\nSELECT vendor_state,\n    MAX(sum_of_invoices) AS sum_of_invoices\nFROM summary\nGROUP BY vendor_state \n\n\n10 records\n\n\nvendor_state\nsum_of_invoices\n\n\n\n\nNV\n23177.96\n\n\nTN\n4378.02\n\n\nCA\n7125.34\n\n\nAZ\n662.00\n\n\nOH\n207.78\n\n\nMI\n119892.41\n\n\nTX\n2154.42\n\n\nMA\n1367.50\n\n\nPA\n265.36\n\n\nDC\n600.00\n\n\n\n\n\nLastly, we create nicknames for both results (yes, you can create CTE for any query that you wish to assign) and write the final query to get selected vendor names to each state and sum_of_invoices. (hnit: use inner join)\n\nWITH summary AS\n(\nSELECT vendor_state, \n    vendor_name,\n    SUM(invoice_total) AS sum_of_invoices\nFROM vendors v INNER JOIN invoices i \n    ON v.vendor_id = i.vendor_id\nGROUP BY vendor_state, vendor_name\n),\ntop_in_state AS\n(\nSELECT vendor_state,\n    MAX(sum_of_invoices) AS sum_of_invoices\nFROM summary\nGROUP BY vendor_state\n)\n\nSELECT summary.vendor_state, summary.vendor_name,\n       top_in_state.sum_of_invoices\nFROM summary INNER JOIN top_in_state\n    ON summary.vendor_state = top_in_state.vendor_state AND\n       summary.sum_of_invoices = top_in_state.sum_of_invoices\nORDER BY summary.vendor_state\n\n\n10 records\n\n\nvendor_state\nvendor_name\nsum_of_invoices\n\n\n\n\nAZ\nWells Fargo Bank\n662.00\n\n\nCA\nDigital Dreamworks\n7125.34\n\n\nDC\nReiter’s Scientific & Pro Books\n600.00\n\n\nMA\nDean Witter Reynolds\n1367.50\n\n\nMI\nMalloy Lithographing Inc\n119892.41\n\n\nNV\nUnited Parcel Service\n23177.96\n\n\nOH\nEdward Data Services\n207.78\n\n\nPA\nCardinal Business Media, Inc.\n265.36\n\n\nTN\nFederal Express Corporation\n4378.02\n\n\nTX\nIngram\n2154.42\n\n\n\n\n\n\n\nRecursive\nRecursive querying can loop through a result set and perform processing to return a final result set. This is similar to “while loop” in other programming languages such as R, Python.\nThis is commonly used when you want to build a dataset reflecting on hierarchy: one parent record has many child records, each child record can have their own child records. For example, see the employees table where there are multiple managing levels embedded.\n\nSELECT *\nFROM ex.employees\n\n\n9 records\n\n\nemployee_id\nlast_name\nfirst_name\ndepartment_number\nmanager_id\n\n\n\n\n1\nSmith\nCindy\n2\nNA\n\n\n2\nJones\nElmer\n4\n1\n\n\n3\nSimonian\nRalph\n2\n2\n\n\n4\nHernandez\nOlivia\n1\n9\n\n\n5\nAaronsen\nRobert\n2\n4\n\n\n6\nWatson\nDenise\n6\n8\n\n\n7\nHardy\nThomas\n5\n2\n\n\n8\nO’Leary\nRhea\n4\n9\n\n\n9\nLocario\nPaulo\n6\n1\n\n\n\n\n\nExample: we will build an employee dataset with ranking order. Each employee has the same staff level will have the same ranking.\nFirst, we start at the top of the hierachy.\n\nSELECT employee_id, \n    CONCAT(first_name, ' ', last_name) AS employee_name,\n    1 AS ranking\nFROM ex.employees\nWHERE manager_id IS NULL\n\n\n1 records\n\n\nemployee_id\nemployee_name\nranking\n\n\n\n\n1\nCindy Smith\n1\n\n\n\n\n\nSecond, we experiment with the next level where staff are directly managed by employee_id 1. At this stage, they should have ranking increased by 1, as they are level 2 staff.\n\nWITH employees_cte AS\n(\nSELECT employee_id, \n    CONCAT(first_name, ' ', last_name) AS employee_name,\n    1 AS ranking\nFROM ex.employees\nWHERE manager_id IS NULL\n)\n\nSELECT employees.employee_id, \n    CONCAT(employees.first_name, ' ', employees.last_name) AS employee_name,\n    1+1 AS ranking\nFROM ex.employees INNER JOIN employees_cte ON employees.manager_id = employees_cte.employee_id\nWHERE employees.employee_id = 2\n\n\n1 records\n\n\nemployee_id\nemployee_name\nranking\n\n\n\n\n2\nElmer Jones\n2\n\n\n\n\n\nNotice that if employees have the same level of manager at this point, it will all be returned with the same level of ranking. This is ensured by the “inner join” to employees table.\n\nWITH employees_cte AS\n(\nSELECT employee_id, \n    CONCAT(first_name, ' ', last_name) AS employee_name,\n    1 AS ranking\nFROM ex.employees\nWHERE manager_id IS NULL\n)\n\nSELECT employees.employee_id, \n    CONCAT(employees.first_name, ' ', employees.last_name) AS employee_name,\n    1+1 AS ranking\nFROM ex.employees INNER JOIN employees_cte ON employees.manager_id = employees_cte.employee_id\nWHERE employees.employee_id = 9\n\n\n1 records\n\n\nemployee_id\nemployee_name\nranking\n\n\n\n\n9\nPaulo Locario\n2\n\n\n\n\n\nIf the employee doesn’t have the same management at this time in the employees_cte expression, the result will be empty.\n\nWITH employees_cte AS\n(\nSELECT employee_id, \n    CONCAT(first_name, ' ', last_name) AS employee_name,\n    1 AS ranking\nFROM ex.employees\nWHERE manager_id IS NULL\n)\n\nSELECT employees.employee_id, \n    CONCAT(employees.first_name, ' ', employees.last_name) AS employee_name,\n    1+1 AS ranking\nFROM ex.employees INNER JOIN employees_cte ON employees.manager_id = employees_cte.employee_id\nWHERE employees.employee_id = 8\n\n\n0 records\n\n\nemployee_id\nemployee_name\nranking\n\n\n\n\n\n\n\nThird, imagine the following is happening:\n\nWe are going through this exercise second time, add all of the second level of staff with ranking 2 and append to employees_cte;\nWe are going through this exercise third time and add all of the third level of staff with ranking 3 and append to employees_cte;\nWe are not stopping until we have every record remaining all return empty (i.e. nothing to further append to employees_cte).\n\nNow, we have the following SQL statement to manifest that logic above.\nWith “UNION ALL”, we need to make sure your recursive query should have exactly the same columns and column names with the initial query.\n\nWITH RECURSIVE employees_cte AS\n(\n-- Nonrecursive query\nSELECT employee_id, \n    CONCAT(first_name, ' ', last_name) AS employee_name,\n    1 AS ranking\nFROM ex.employees\nWHERE manager_id IS NULL\n\n-- this to make sure the \"append\" action is taking place after each loop\nUNION ALL \n\n-- Recursive query\nSELECT employees.employee_id, \n    CONCAT(first_name, ' ', last_name), \n    ranking + 1\nFROM ex.employees\n    INNER JOIN employees_cte\n    ON employees.manager_id = employees_cte.employee_id\n)\n\nSELECT *\nFROM employees_cte\nORDER BY ranking, employee_id\n\n\n9 records\n\n\nemployee_id\nemployee_name\nranking\n\n\n\n\n1\nCindy Smith\n1\n\n\n2\nElmer Jones\n2\n\n\n9\nPaulo Locario\n2\n\n\n3\nRalph Simonian\n3\n\n\n4\nOlivia Hernandez\n3\n\n\n7\nThomas Hardy\n3\n\n\n8\nRhea O’Leary\n3\n\n\n5\nRobert Aaronsen\n4\n\n\n6\nDenise Watson\n4\n\n\n\n\n\n\n\n\nUse Subquery in FROM\nHere, we want a query that:\n\nGets the names of all vendors.\nFinds the latest invoice date for each vendor.\nLists the vendors with the most recent invoices at the top.\n\nFirst, let’s see total invoice amounts by vendor name and invoice date\n\nSELECT vendor_name, invoice_date\nFROM invoices i LEFT JOIN vendors v ON i.vendor_id = v.vendor_id\n\n\nDisplaying records 1 - 15\n\n\nvendor_name\ninvoice_date\n\n\n\n\nUnited Parcel Service\n2022-04-08\n\n\nFederal Express Corporation\n2022-04-10\n\n\nFederal Express Corporation\n2022-04-13\n\n\nFederal Express Corporation\n2022-04-16\n\n\nFederal Express Corporation\n2022-04-16\n\n\nFederal Express Corporation\n2022-04-16\n\n\nFederal Express Corporation\n2022-04-21\n\n\nEvans Executone Inc\n2022-04-24\n\n\nZylka Design\n2022-04-24\n\n\nFederal Express Corporation\n2022-04-24\n\n\nFederal Express Corporation\n2022-04-25\n\n\nWells Fargo Bank\n2022-04-26\n\n\nPacific Bell\n2022-04-30\n\n\nRoadway Package System, Inc\n2022-05-01\n\n\nFresno County Tax Collector\n2022-05-03\n\n\n\n\n\nSecond, let’s see the latest invoice date by each vendor\n\nSELECT vendor_name, MAX(invoice_date) AS latest_inv\nFROM \n( SELECT vendor_name, invoice_date\n  FROM invoices i LEFT JOIN vendors v ON i.vendor_id = v.vendor_id ) t\nGROUP BY vendor_name\nORDER BY latest_inv DESC\n\n\nDisplaying records 1 - 15\n\n\nvendor_name\nlatest_inv\n\n\n\n\nFederal Express Corporation\n2022-08-02\n\n\nBlue Cross\n2022-08-01\n\n\nMalloy Lithographing Inc\n2022-07-31\n\n\nCardinal Business Media, Inc.\n2022-07-28\n\n\nZylka Design\n2022-07-25\n\n\nUnited Parcel Service\n2022-07-24\n\n\nFord Motor Credit Company\n2022-07-24\n\n\nIngram\n2022-07-21\n\n\nWakefield Co\n2022-07-20\n\n\nReiter’s Scientific & Pro Books\n2022-07-19\n\n\nPacific Bell\n2022-07-15\n\n\nSuburban Propane\n2022-07-15\n\n\nData Reproductions Corp\n2022-07-10\n\n\nAbbey Office Furnishings\n2022-07-05\n\n\nCahners Publishing Company\n2022-06-30\n\n\n\n\n\n\n\nAlternative: Use Subquery in SELECT\nThis is a second solution to the same problem statement:\n“We want a query that:\n\nGets the names of all vendors.\nFinds the latest invoice date for each vendor.\nLists the vendors with the most recent invoices at the top.”\n\n\nSELECT vendor_name,\n    (SELECT MAX(invoice_date) \n     FROM invoices\n     WHERE vendor_id = vendors.vendor_id) AS latest_inv\nFROM vendors\nORDER BY latest_inv DESC\n\n\nDisplaying records 1 - 15\n\n\nvendor_name\nlatest_inv\n\n\n\n\nFederal Express Corporation\n2022-08-02\n\n\nBlue Cross\n2022-08-01\n\n\nMalloy Lithographing Inc\n2022-07-31\n\n\nCardinal Business Media, Inc.\n2022-07-28\n\n\nZylka Design\n2022-07-25\n\n\nFord Motor Credit Company\n2022-07-24\n\n\nUnited Parcel Service\n2022-07-24\n\n\nIngram\n2022-07-21\n\n\nWakefield Co\n2022-07-20\n\n\nReiter’s Scientific & Pro Books\n2022-07-19\n\n\nPacific Bell\n2022-07-15\n\n\nSuburban Propane\n2022-07-15\n\n\nData Reproductions Corp\n2022-07-10\n\n\nAbbey Office Furnishings\n2022-07-05\n\n\nCahners Publishing Company\n2022-06-30\n\n\n\n\n\n\n\nAnother Alternative: Use CTE\nNow, we have learned common table expression and let’s see another implementation of this query. First, let’s see all invoices of their latest invoice date\n\nSELECT vendor_id, MAX(invoice_date) \nFROM invoices\nGROUP BY vendor_id\n\n\nDisplaying records 1 - 15\n\n\nvendor_id\nMAX(invoice_date)\n\n\n\n\n34\n2022-06-09\n\n\n37\n2022-08-01\n\n\n48\n2022-05-03\n\n\n72\n2022-07-10\n\n\n80\n2022-07-28\n\n\n81\n2022-06-21\n\n\n82\n2022-07-19\n\n\n83\n2022-07-21\n\n\n86\n2022-06-11\n\n\n88\n2022-05-15\n\n\n89\n2022-04-24\n\n\n90\n2022-07-20\n\n\n94\n2022-07-05\n\n\n95\n2022-07-15\n\n\n96\n2022-04-26\n\n\n\n\n\nSecond, we can create a common table expression for the aggregated result above and use join mechanism to bring vendor name and other information from vendor table\n\nWITH t AS \n(SELECT vendor_id, MAX(invoice_date) AS latest_inv\nFROM invoices\nGROUP BY vendor_id)\n\nSELECT vendor_name, latest_inv \nFROM vendors LEFT JOIN t ON t.vendor_id = vendors.vendor_id\nORDER BY latest_inv DESC\n\n\nDisplaying records 1 - 15\n\n\nvendor_name\nlatest_inv\n\n\n\n\nFederal Express Corporation\n2022-08-02\n\n\nBlue Cross\n2022-08-01\n\n\nMalloy Lithographing Inc\n2022-07-31\n\n\nCardinal Business Media, Inc.\n2022-07-28\n\n\nZylka Design\n2022-07-25\n\n\nFord Motor Credit Company\n2022-07-24\n\n\nUnited Parcel Service\n2022-07-24\n\n\nIngram\n2022-07-21\n\n\nWakefield Co\n2022-07-20\n\n\nReiter’s Scientific & Pro Books\n2022-07-19\n\n\nPacific Bell\n2022-07-15\n\n\nSuburban Propane\n2022-07-15\n\n\nData Reproductions Corp\n2022-07-10\n\n\nAbbey Office Furnishings\n2022-07-05\n\n\nCahners Publishing Company\n2022-06-30",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Subqueries</span>"
    ]
  },
  {
    "objectID": "MySQL_6_Subqueries.html#write-complex-queries",
    "href": "MySQL_6_Subqueries.html#write-complex-queries",
    "title": "4  Subqueries",
    "section": "4.4 Write Complex Queries",
    "text": "4.4 Write Complex Queries\n\nState the problem to be solved by the query in plain language.\nUse pseudocode to outline the query.\nCode the subqueries and test them to be sure that they return the correct data.\nCode and test the final query.\n\n\nSELECT t1.vendor_state, vendor_name, t1.sum_of_invoices\nFROM\n(\n    -- sum of invoice totals by vendor\n    SELECT vendor_state, vendor_name,\n        SUM(invoice_total) AS sum_of_invoices\n    FROM vendors v JOIN invoices i \n        ON v.vendor_id = i.vendor_id\n    GROUP BY vendor_state, vendor_name\n) t1\n\nJOIN\n(\n  -- top sum of invoice totals by state\n  SELECT vendor_state,  \n         MAX(sum_of_invoices)\n         AS sum_of_invoices\n  FROM\n  (\n    -- sum of invoice totals by vendor\n    SELECT vendor_state, vendor_name,\n        SUM(invoice_total)\n        AS sum_of_invoices\n    FROM vendors v JOIN invoices i \n        ON v.vendor_id = i.vendor_id\n    GROUP BY vendor_state, vendor_name\n  ) t2\n  GROUP BY vendor_state\n) t3\n    ON t1.vendor_state = t3.vendor_state AND \n       t1.sum_of_invoices = t3.sum_of_invoices\nORDER BY vendor_state\n\n\n10 records\n\n\nvendor_state\nvendor_name\nsum_of_invoices\n\n\n\n\nAZ\nWells Fargo Bank\n662.00\n\n\nCA\nDigital Dreamworks\n7125.34\n\n\nDC\nReiter’s Scientific & Pro Books\n600.00\n\n\nMA\nDean Witter Reynolds\n1367.50\n\n\nMI\nMalloy Lithographing Inc\n119892.41\n\n\nNV\nUnited Parcel Service\n23177.96\n\n\nOH\nEdward Data Services\n207.78\n\n\nPA\nCardinal Business Media, Inc.\n265.36\n\n\nTN\nFederal Express Corporation\n4378.02\n\n\nTX\nIngram\n2154.42",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Subqueries</span>"
    ]
  },
  {
    "objectID": "MySQL_6_Subqueries.html#logical-operators",
    "href": "MySQL_6_Subqueries.html#logical-operators",
    "title": "4  Subqueries",
    "section": "4.5 Logical Operators",
    "text": "4.5 Logical Operators\nThe best way to understand logical operators is to put them into use.\n\nALL\n\nx &gt; ALL (1, 2) &lt;=&gt; x &gt; 2\nx &lt; ALL (1, 2) &lt;=&gt; x &lt; 1\nx = ALL (1, 2) &lt;=&gt; (x = 1) AND (x = 2)\nx != ALL (1, 2)&lt;=&gt; x NOT IN (1, 2)\n\nExample: we want to get all of the invoices with invoice_totals &gt; the largest invoice_totals from vendor with vendor_id 34.\n\nSELECT vendor_name, invoice_number, invoice_total\nFROM invoices i JOIN vendors v ON i.vendor_id = v.vendor_id\nWHERE invoice_total &gt; ALL\n    (SELECT invoice_total\n     FROM invoices\n     WHERE vendor_id = 34)\nORDER BY vendor_name\n\n\nDisplaying records 1 - 15\n\n\nvendor_name\ninvoice_number\ninvoice_total\n\n\n\n\nBertelsmann Industry Svcs. Inc\n509786\n6940.25\n\n\nCahners Publishing Company\n587056\n2184.50\n\n\nComputerworld\n367447\n2433.00\n\n\nData Reproductions Corp\n40318\n21842.00\n\n\nDean Witter Reynolds\n75C-90227\n1367.50\n\n\nDigital Dreamworks\nP02-3772\n7125.34\n\n\nFranchise Tax Board\nRTR-72-3662-X\n1600.00\n\n\nIngram\n31359783\n1575.00\n\n\nMalloy Lithographing Inc\n0-2058\n37966.19\n\n\nMalloy Lithographing Inc\nP-0259\n26881.40\n\n\nMalloy Lithographing Inc\nP-0608\n20551.18\n\n\nMalloy Lithographing Inc\n0-2060\n23517.58\n\n\nMalloy Lithographing Inc\n0-2436\n10976.06\n\n\nPollstar\n77290\n1750.00\n\n\nUnited Parcel Service\n989319-457\n3813.33\n\n\n\n\n\n\n\nANY\n\nx &gt; ANY (1, 2) &lt;=&gt; x &gt; 1\nx &lt; ANY (1, 2) &lt;=&gt; x &lt; 2\nx = ANY (1, 2) &lt;=&gt; x IN (1, 2)\nx != ANY (1, 2) &lt;=&gt; (x != 1) OR (x != 2)\n\nExample: we want to get all of the invoices with invoice_totals &lt; the largest invoice_totals from vendor with vendor_id 115.\n\nSELECT vendor_name, invoice_number, invoice_total\nFROM vendors JOIN invoices\n  ON vendors.vendor_id = invoices.vendor_id\nWHERE invoice_total &lt; ANY\n    (SELECT invoice_total\n     FROM invoices\n     WHERE vendor_id = 115)\n\n\nDisplaying records 1 - 15\n\n\nvendor_name\ninvoice_number\ninvoice_total\n\n\n\n\nFederal Express Corporation\n963253251\n15.50\n\n\nPacific Bell\n111-92R-10096\n16.33\n\n\nRoadway Package System, Inc\n25022117\n6.00\n\n\nCompuserve\n21-4748363\n9.95\n\n\nFederal Express Corporation\n4-321-2596\n10.00\n\n\nRoadway Package System, Inc\n24863706\n6.00\n\n\nCompuserve\n21-4923721\n9.95\n\n\nFederal Express Corporation\n4-342-8069\n10.00\n\n\nPacific Bell\n111-92R-10094\n19.67\n\n\nPacific Bell\n111-92R-10097\n16.33\n\n\nFederal Express Corporation\n4-314-3057\n13.75\n\n\nFederal Express Corporation\n963253267\n23.50\n\n\nRoadway Package System, Inc\n24780512\n6.00\n\n\nFederal Express Corporation\n43966316\n10.00\n\n\nAbbey Office Furnishings\n203339-13\n17.50\n\n\n\n\n\n\n\nIN\nIf a value is in a list of values.\nSubquery should return a single column (i.e. a list of values).\nExample: the following returns all vendor names and their state where they have invoice total less than $100.\n\nSELECT vendor_name, vendor_state\nFROM vendors\nWHERE vendor_name IN \n  ( SELECT vendor_name\n    FROM invoices i INNER JOIN vendors v ON i.vendor_id = v.vendor_id\n    WHERE invoice_total &lt; 100)\nORDER BY vendor_name\n\n\n10 records\n\n\nvendor_name\nvendor_state\n\n\n\n\nAbbey Office Furnishings\nCA\n\n\nCardinal Business Media, Inc.\nPA\n\n\nCoffee Break Service\nCA\n\n\nCompuserve\nOH\n\n\nData Reproductions Corp\nMI\n\n\nEvans Executone Inc\nCA\n\n\nFederal Express Corporation\nTN\n\n\nPacific Bell\nCA\n\n\nRoadway Package System, Inc\nCA\n\n\nSuburban Propane\nCA\n\n\n\n\n\n\n\nEXSITS\nExample: The following gets all of vendors with existing invoices\n\nSELECT vendor_id, vendor_name, vendor_state\nFROM vendors\nWHERE EXISTS\n    (SELECT * \n     FROM invoices\n     WHERE vendor_id = vendors.vendor_id)\n\n\nDisplaying records 1 - 15\n\n\nvendor_id\nvendor_name\nvendor_state\n\n\n\n\n34\nIBM\nCA\n\n\n37\nBlue Cross\nCA\n\n\n48\nFresno County Tax Collector\nCA\n\n\n72\nData Reproductions Corp\nMI\n\n\n80\nCardinal Business Media, Inc.\nPA\n\n\n81\nWang Laboratories, Inc.\nCA\n\n\n82\nReiter’s Scientific & Pro Books\nDC\n\n\n83\nIngram\nTX\n\n\n86\nComputerworld\nCA\n\n\n88\nEdward Data Services\nOH\n\n\n89\nEvans Executone Inc\nCA\n\n\n90\nWakefield Co\nCA\n\n\n94\nAbbey Office Furnishings\nCA\n\n\n95\nPacific Bell\nCA\n\n\n96\nWells Fargo Bank\nAZ\n\n\n\n\n\nTo negate, i.e. to find all vendors that don’t have any invoices yet. (“NOT EXISTS”)\n\nSELECT vendor_id, vendor_name, vendor_state\nFROM vendors\nWHERE NOT EXISTS\n    (SELECT * \n     FROM invoices\n     WHERE vendor_id = vendors.vendor_id)\n\n\nDisplaying records 1 - 15\n\n\nvendor_id\nvendor_name\nvendor_state\n\n\n\n\n1\nUS Postal Service\nWI\n\n\n2\nNational Information Data Ctr\nDC\n\n\n3\nRegister of Copyrights\nDC\n\n\n4\nJobtrak\nCA\n\n\n5\nNewbrige Book Clubs\nNJ\n\n\n6\nCalifornia Chamber Of Commerce\nCA\n\n\n7\nTowne Advertiser’s Mailing Svcs\nCA\n\n\n8\nBFI Industries\nCA\n\n\n9\nPacific Gas & Electric\nCA\n\n\n10\nRobbins Mobile Lock And Key\nCA\n\n\n11\nBill Marvin Electric Inc\nCA\n\n\n12\nCity Of Fresno\nCA\n\n\n13\nGolden Eagle Insurance Co\nCA\n\n\n14\nExpedata Inc\nCA\n\n\n15\nASC Signs\nCA",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Subqueries</span>"
    ]
  },
  {
    "objectID": "MySQL_7_Update_Data.html",
    "href": "MySQL_7_Update_Data.html",
    "title": "5  Update Data",
    "section": "",
    "text": "5.1 Reference\nDefault database in this chapter is “ap”.\nOther databases included in the simulation MySQL server:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Update Data</span>"
    ]
  },
  {
    "objectID": "MySQL_7_Update_Data.html#reference",
    "href": "MySQL_7_Update_Data.html#reference",
    "title": "5  Update Data",
    "section": "",
    "text": "om\nex",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Update Data</span>"
    ]
  },
  {
    "objectID": "MySQL_7_Update_Data.html#table-operations",
    "href": "MySQL_7_Update_Data.html#table-operations",
    "title": "5  Update Data",
    "section": "5.2 Table Operations",
    "text": "5.2 Table Operations\n\nCreate table\n\nCREATE TABLE invoices_copy AS \n-- everything below can be just a standalong query, you can choose to create the new table with only certain data from the original \nSELECT *\nFROM invoices\n\nLocate the newly created table: invoices_copy in ap database:\n\nSHOW TABLES\nFROM ap\n\n\n9 records\n\n\nTables_in_ap\n\n\n\n\ngeneral_ledger_accounts\n\n\ninvoice_archive\n\n\ninvoice_archive_copy\n\n\ninvoice_line_items\n\n\ninvoices\n\n\ninvoices_copy\n\n\nterms\n\n\nvendor_contacts\n\n\nvendors\n\n\n\n\n\n\n\nDelete Table\nAlways use full 3-part naming to be sure deleting the correct table\n\nDROP TABLE ap.invoices_copy\n\nConfirm deleted\n\nSHOW TABLES\nFROM ap\nWHERE Tables_in_ap = 'invoices_copy'\n\n\n0 records\n\n\nTables_in_ap\n\n\n\n\n\n\n\n\n\nRecreate a Table\nIf you want to remove a table as long as the table exists in the database (Especially useful when you only want to create a temporary table):\n\nDROP TABLE IF EXISTS invoices_copy",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Update Data</span>"
    ]
  },
  {
    "objectID": "MySQL_7_Update_Data.html#data-operations",
    "href": "MySQL_7_Update_Data.html#data-operations",
    "title": "5  Update Data",
    "section": "5.3 Data Operations",
    "text": "5.3 Data Operations\nCreate backup table for demonstration.\n\nCREATE TABLE invoices_copy AS \nSELECT *\nFROM invoices\n\nSee the schema for the new table. Easier for the adding new data later…\n\nSELECT *\nFROM invoices_copy\nLIMIT 1\n\n\n1 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n1\n122\n989319-457\n2022-04-08\n3813.33\n3813.33\n0\n3\n2022-05-08\n2022-05-07\n\n\n\n\n\nCreate other backup tables:\n\nDROP TABLE IF EXISTS invoice_archive_copy\n\n\nCREATE TABLE invoice_archive_copy AS \nSELECT *\nFROM invoice_archive\n\n\nINSERT: Add New Records\nAdd 1 row to invoices_copy table. Notice that all column values must be entered, even if it is NULL.\n\nINSERT INTO invoices_copy VALUES\n(115, 97, '456789', '2022-08-01', 8344.50, 0, 0, 1, '2022-08-31', NULL)\n\nCheck the new record is in place:\n\nSELECT *\nFROM invoices_copy \nWHERE invoice_id = 115\n\n\n1 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n115\n97\n456789\n2022-08-01\n8344.5\n0\n0\n1\n2022-08-31\nNA\n\n\n\n\n\nAdd multiple records in one statement:\n\nINSERT INTO invoices_copy VALUES\n    (116, 97, '456701', '2022-08-02', 270.50, 0, 0, 1,\n    '2022-09-01', NULL),\n    (117, 97, '456791', '2022-08-03', 4390.00, 0, 0, 1,\n    '2022-09-02', NULL),\n    (118, 97, '456792', '2022-08-03', 565.60, 0, 0, 1,\n    '2022-09-02', NULL)\n\nVerify the new records have been added:\n\nSELECT *\nFROM ap.invoices_copy \nWHERE invoice_id &gt; 115\n\n\n3 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n116\n97\n456701\n2022-08-02\n270.5\n0\n0\n1\n2022-09-01\nNA\n\n\n117\n97\n456791\n2022-08-03\n4390.0\n0\n0\n1\n2022-09-02\nNA\n\n\n118\n97\n456792\n2022-08-03\n565.6\n0\n0\n1\n2022-09-02\nNA\n\n\n\n\n\nYou can also copy and add a whole subset of records from one table (source table) to another (target table). To do this, you need to ensure:\n\nTarget table has all the columns in EXACTLY THE SAME names\nSelect only the same columns from the source table\n\nExample: To copy a whole chunk of rows to invoice_arhchive.\nTo start with, the target table invoice_archive_copy has no records…\n\nSELECT * \nFROM invoice_archive_copy\n\n\n0 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n\n\n\nNow, we add all invoices (source table) with 0 balance to the archive table.\n\nINSERT INTO invoice_archive_copy\n    (invoice_id, vendor_id, invoice_number,\n    invoice_total, credit_total, payment_total,\n    terms_id, invoice_date, invoice_due_date)\nSELECT\n    invoice_id, vendor_id, invoice_number,\n    invoice_total, credit_total, payment_total,\n    terms_id, invoice_date, invoice_due_date\nFROM invoices_copy\nWHERE invoice_total - payment_total - credit_total = 0\n\nNow, let’s see the target table again…\n\nSELECT * \nFROM invoice_archive_copy\nLIMIT 10\n\n\n10 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n1\n122\n989319-457\n2022-04-08\n3813.33\n3813.33\n0\n3\n2022-05-08\nNA\n\n\n2\n123\n263253241\n2022-04-10\n40.20\n40.20\n0\n3\n2022-05-10\nNA\n\n\n3\n123\n963253234\n2022-04-13\n138.75\n138.75\n0\n3\n2022-05-13\nNA\n\n\n4\n123\n2-000-2993\n2022-04-16\n144.70\n144.70\n0\n3\n2022-05-16\nNA\n\n\n5\n123\n963253251\n2022-04-16\n15.50\n15.50\n0\n3\n2022-05-16\nNA\n\n\n6\n123\n963253261\n2022-04-16\n42.75\n42.75\n0\n3\n2022-05-16\nNA\n\n\n7\n123\n963253237\n2022-04-21\n172.50\n172.50\n0\n3\n2022-05-21\nNA\n\n\n8\n89\n125520-1\n2022-04-24\n95.00\n95.00\n0\n1\n2022-05-04\nNA\n\n\n9\n121\n97/488\n2022-04-24\n601.95\n601.95\n0\n3\n2022-05-24\nNA\n\n\n10\n123\n263253250\n2022-04-24\n42.67\n42.67\n0\n3\n2022-05-24\nNA\n\n\n\n\n\n\n\nUPDATE: Modify Records\nExample: We want to manually update an invoice record with a particular invoice_number\nNow, let’s see what it looks like before any updates\n\nSELECT *\nFROM invoices_copy\nWHERE invoice_number = '97/522'\n\n\n1 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n78\n121\n97/522\n2022-06-28\n1962.13\n1762.13\n200\n3\n2022-07-28\n2022-07-30\n\n\n\n\n\nNow, we will update the payment_date and payment_total values of the same invoice:\n\nUPDATE invoices_copy\nSET payment_date = '2022-09-21', \n    payment_total = 19351.18\nWHERE invoice_number = '97/522'\n\nNow, let’s see what it looks like after the updates:\n\nSELECT *\nFROM invoices_copy\nWHERE invoice_number = '97/522'\n\n\n1 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n78\n121\n97/522\n2022-06-28\n1962.13\n19351.18\n200\n3\n2022-07-28\n2022-09-21\n\n\n\n\n\nWe can also update the new values with the calculation from the old values.\nExample: We want to increase the credit total by 100\n\nUPDATE invoices_copy\nSET credit_total = credit_total + 100 \n/* mathmatically, this does not make sense, but here, it simply means credit_total (new) = credit_total (old) + 100 */\nWHERE invoice_number = '97/522'\n\nNow, let’s see what it looks like after the second update:\n\nSELECT *\nFROM invoices_copy\nWHERE invoice_number = '97/522'\n\n\n1 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n78\n121\n97/522\n2022-06-28\n1962.13\n19351.18\n300\n3\n2022-07-28\n2022-09-21\n\n\n\n\n\nYou can also use update a batch of records meeting criteria from a subquery.\nExample: we want to set all terms_id to 1 (instead of current 2) for a vendor with name called ‘Pacific Bell’. This is only possible when querying with vendor table.\nNow, let’s see what all invoices look with vendor Pacific Bell like, before any updates:\n\nSELECT *\nFROM invoices_copy\nWHERE vendor_id IN\n      (SELECT vendor_id\n       FROM vendors\n       WHERE vendor_name = 'Pacific Bell')\n\n\n6 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n13\n95\n111-92R-10096\n2022-04-30\n16.33\n16.33\n0\n2\n2022-05-20\n2022-05-23\n\n\n44\n95\n111-92R-10094\n2022-06-01\n19.67\n19.67\n0\n2\n2022-06-21\n2022-06-24\n\n\n49\n95\n111-92R-10097\n2022-06-04\n16.33\n16.33\n0\n2\n2022-06-24\n2022-06-26\n\n\n53\n95\n111-92R-10092\n2022-06-09\n46.21\n46.21\n0\n2\n2022-06-29\n2022-07-02\n\n\n83\n95\n111-92R-10093\n2022-07-06\n39.77\n39.77\n0\n2\n2022-07-26\n2022-07-22\n\n\n91\n95\n111-92R-10095\n2022-07-15\n32.70\n32.70\n0\n2\n2022-08-04\n2022-08-06\n\n\n\n\n\nNow, we apply the updates:\n\nUPDATE invoices_copy\nSET terms_id = 1\nWHERE vendor_id =\n      (SELECT vendor_id\n       FROM vendors\n       WHERE vendor_name = 'Pacific Bell')\n\nNow, let’s see what all invoices look with vendor Pacific Bell like, after updates:\n\nSELECT *\nFROM invoices_copy\nWHERE vendor_id IN\n      (SELECT vendor_id\n       FROM vendors\n       WHERE vendor_name = 'Pacific Bell')\n\n\n6 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n13\n95\n111-92R-10096\n2022-04-30\n16.33\n16.33\n0\n1\n2022-05-20\n2022-05-23\n\n\n44\n95\n111-92R-10094\n2022-06-01\n19.67\n19.67\n0\n1\n2022-06-21\n2022-06-24\n\n\n49\n95\n111-92R-10097\n2022-06-04\n16.33\n16.33\n0\n1\n2022-06-24\n2022-06-26\n\n\n53\n95\n111-92R-10092\n2022-06-09\n46.21\n46.21\n0\n1\n2022-06-29\n2022-07-02\n\n\n83\n95\n111-92R-10093\n2022-07-06\n39.77\n39.77\n0\n1\n2022-07-26\n2022-07-22\n\n\n91\n95\n111-92R-10095\n2022-07-15\n32.70\n32.70\n0\n1\n2022-08-04\n2022-08-06\n\n\n\n\n\nNOTE: it is a good idea to query and test the criteria (WHERE clause), before you apply any updates. The same goes to next section “DELETE”, when removing records.\n\n\nDELETE: Remove Records\nExample: we want to remove all the last 3 inserted records: vendor_id: 116, 117, 118\n\nDELETE FROM invoices_copy\nWHERE invoice_id &gt;= 116\n\nNow, let’s see the result: (all records from 116 and above are gone)\n\nSELECT *\nFROM invoices_copy\nWHERE invoice_id &gt;= 115\n\n\n1 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n115\n97\n456789\n2022-08-01\n8344.5\n0\n0\n1\n2022-08-31\nNA",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Update Data</span>"
    ]
  },
  {
    "objectID": "MySQL_8_Working_with_Numeric_Data.html",
    "href": "MySQL_8_Working_with_Numeric_Data.html",
    "title": "6  Working with Numeric Data",
    "section": "",
    "text": "6.1 Reference\nDefault database in this chapter is “ex”.\nOther databases included in the simulation MySQL server:",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Numeric Data</span>"
    ]
  },
  {
    "objectID": "MySQL_8_Working_with_Numeric_Data.html#reference",
    "href": "MySQL_8_Working_with_Numeric_Data.html#reference",
    "title": "6  Working with Numeric Data",
    "section": "",
    "text": "om\nap",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Numeric Data</span>"
    ]
  },
  {
    "objectID": "MySQL_8_Working_with_Numeric_Data.html#numeric-data",
    "href": "MySQL_8_Working_with_Numeric_Data.html#numeric-data",
    "title": "6  Working with Numeric Data",
    "section": "6.2 Numeric Data",
    "text": "6.2 Numeric Data\n\nMain Types\nInteger(INT type): no decimal places.\nFixed-point(DECIMAL type): up to 9 decimal places.\n\nBecause there are finite number of decimal places, they are exact numeric type.\n\nFloating-point (shortly floating, DOUBLE/FLOAT type) values are numeric values with unlimited number of decimal places.\n\nBecause there are unlimited number of decimal places, they are approximate numeric type.\n\n\n\nOther Concepts\nPrecision: number of digit (e.g. 120.98 has a precision of 5, as in 5 digits in total)\nScale: number of decimal places (e.g. 120.98 has a scale of 2, as in 2 decimal places)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Numeric Data</span>"
    ]
  },
  {
    "objectID": "MySQL_8_Working_with_Numeric_Data.html#numeric-data-manipulation",
    "href": "MySQL_8_Working_with_Numeric_Data.html#numeric-data-manipulation",
    "title": "6  Working with Numeric Data",
    "section": "6.3 Numeric Data Manipulation",
    "text": "6.3 Numeric Data Manipulation\n\nManaging Rounding and Scale\n\nSELECT \n  float_value,\n  ROUND(float_value, 3),\n  TRUNCATE(float_value, 3),\n  CEILING(float_value),\n  FLOOR(float_value)\nFROM float_sample\n\n\n6 records\n\n\n\n\n\n\n\n\n\nfloat_value\nROUND(float_value, 3)\nTRUNCATE(float_value, 3)\nCEILING(float_value)\nFLOOR(float_value)\n\n\n\n\n1.00000\n1.000\n0.999\n1\n0\n\n\n1.00000\n1.000\n1.000\n1\n1\n\n\n1.00000\n1.000\n1.000\n2\n1\n\n\n1234.56789\n1234.568\n1234.567\n1235\n1234\n\n\n999.04440\n999.044\n999.044\n1000\n999\n\n\n24.04849\n24.048\n24.048\n25\n24\n\n\n\n\n\nNote: negative values are evaluated together with their negativity.\n\nSELECT \n  CEILING(-12.4567),\n  FLOOR(-12.4567)\n\n\n1 records\n\n\nCEILING(-12.4567)\nFLOOR(-12.4567)\n\n\n\n\n-12\n-13\n\n\n\n\n\n\n\nCalcuation\n\nSELECT \n  float_value,\n  ABS(float_value),\n  -- SIGN(float_value),\n  SQRT(float_value),\n  POWER(float_value, 3)\nFROM float_sample\n\n\n6 records\n\n\n\n\n\n\n\n\nfloat_value\nABS(float_value)\nSQRT(float_value)\nPOWER(float_value, 3)\n\n\n\n\n1.00000\n1.00000\n1.000000\n1.000000e+00\n\n\n1.00000\n1.00000\n1.000000\n1.000000e+00\n\n\n1.00000\n1.00000\n1.000000\n1.000000e+00\n\n\n1234.56789\n1234.56789\n35.136418\n1.881676e+09\n\n\n999.04440\n999.04440\n31.607664\n9.971359e+08\n\n\n24.04849\n24.04849\n4.903926\n1.390796e+04\n\n\n\n\n\n\n\nRandom Number Generation\nRAND() function doesn’t require any input to work, i.e. they will generate random numbers anyways.\nThe integer as an argument is called “seed”. This is used to ensure everytime the query run it will create exactly the same set of random numbers.\n\nSELECT\n  float_value,\n  RAND(123)\nFROM float_sample\n\n\n6 records\n\n\nfloat_value\nRAND(123)\n\n\n\n\n1.00000\n0.9277429\n\n\n1.00000\n0.4609716\n\n\n1.00000\n0.5216294\n\n\n1234.56789\n0.2252323\n\n\n999.04440\n0.5612733\n\n\n24.04849\n0.1306697",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Working with Numeric Data</span>"
    ]
  },
  {
    "objectID": "MySQL_9_Working_with_Character_Values.html",
    "href": "MySQL_9_Working_with_Character_Values.html",
    "title": "7  Working with Character Values",
    "section": "",
    "text": "7.1 Reference\nDefault database in this chapter is “ex”.\nOther databases included in the simulation MySQL server:\nThis document is based on MySQL 8.4.\nMySQL references for string manipulation: https://dev.mysql.com/doc/refman/8.4/en/string-functions.html",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with Character Values</span>"
    ]
  },
  {
    "objectID": "MySQL_9_Working_with_Character_Values.html#reference",
    "href": "MySQL_9_Working_with_Character_Values.html#reference",
    "title": "7  Working with Character Values",
    "section": "",
    "text": "om\nap",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with Character Values</span>"
    ]
  },
  {
    "objectID": "MySQL_9_Working_with_Character_Values.html#character-data-type",
    "href": "MySQL_9_Working_with_Character_Values.html#character-data-type",
    "title": "7  Working with Character Values",
    "section": "7.2 Character Data Type",
    "text": "7.2 Character Data Type",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with Character Values</span>"
    ]
  },
  {
    "objectID": "MySQL_9_Working_with_Character_Values.html#regular-expression",
    "href": "MySQL_9_Working_with_Character_Values.html#regular-expression",
    "title": "7  Working with Character Values",
    "section": "7.3 Regular Expression",
    "text": "7.3 Regular Expression\nA regular expression (shortened as regex or regexp), sometimes referred to as rational expression, is a sequence of characters that specifies a match pattern in text.\nThere is no universal guide for regex, as each implementation has their own dialoect/flavour. Here is a one that help you to get started. MySQL Regex Syntax",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with Character Values</span>"
    ]
  },
  {
    "objectID": "MySQL_9_Working_with_Character_Values.html#string-extraction",
    "href": "MySQL_9_Working_with_Character_Values.html#string-extraction",
    "title": "7  Working with Character Values",
    "section": "7.4 String Extraction",
    "text": "7.4 String Extraction\n\nSUBSTRING_INDEX\nSUBSTRING_INDEX(): Return a substring from a string before the specified number of occurrences of the delimiter.\n\nSELECT emp_name,\n    SUBSTRING_INDEX(emp_name, ' ', 1) AS first_name,\n    SUBSTRING_INDEX(emp_name, ' ', -1) AS last_name\nFROM string_sample\n\n\n5 records\n\n\nemp_name\nfirst_name\nlast_name\n\n\n\n\nLizbeth Darien\nLizbeth\nDarien\n\n\nDarnell O’Sullivan\nDarnell\nO’Sullivan\n\n\nLance Pinos-Potter\nLance\nPinos-Potter\n\n\nJean Paul Renard\nJean\nRenard\n\n\nAlisha von Strump\nAlisha\nStrump\n\n\n\n\n\n\n\nSUBSTRING\nSUBSTRING(): Return the substring between 2 position indexes.\nNoitce the following example and the actions:\n\nfirst number is the index position\n\nif positive, counting from the left end\nif negative, counting from the right end\n\nsecond number says how many characters counting down should be returned.\n\n\nSELECT emp_name,\n    SUBSTRING(emp_name, 2, 2),\n    SUBSTRING(emp_name, -4, 3)\nFROM string_sample\n\n\n5 records\n\n\n\n\n\n\n\nemp_name\nSUBSTRING(emp_name, 2, 2)\nSUBSTRING(emp_name, -4, 3)\n\n\n\n\nLizbeth Darien\niz\nrie\n\n\nDarnell O’Sullivan\nar\niva\n\n\nLance Pinos-Potter\nan\ntte\n\n\nJean Paul Renard\nea\nnar\n\n\nAlisha von Strump\nli\nrum\n\n\n\n\n\n\n\nREGEXP_SUBSTR\nREGEXP_SUBSTR(): It is the same as SUBSTRING, but use the regular expression to mathc instead of position index.\nFor more information about regular expression, see Regular Expression\n\nSELECT emp_name,\n  -- match any capital letter, starting at position 3 after the match, return the position 2 after the starting point \n  REGEXP_SUBSTR(emp_name, '[A-Z]', 3, 2)\nFROM string_sample\n\n\n5 records\n\n\nemp_name\nREGEXP_SUBSTR(emp_name, ‘[A-Z]’, 3, 2)\n\n\n\n\nLizbeth Darien\nb\n\n\nDarnell O’Sullivan\nn\n\n\nLance Pinos-Potter\nc\n\n\nJean Paul Renard\nn\n\n\nAlisha von Strump\ns",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with Character Values</span>"
    ]
  },
  {
    "objectID": "MySQL_9_Working_with_Character_Values.html#string-mutation",
    "href": "MySQL_9_Working_with_Character_Values.html#string-mutation",
    "title": "7  Working with Character Values",
    "section": "7.5 String Mutation",
    "text": "7.5 String Mutation\n\nLPAD/RPAD\nMake sure all text strings are extended to the same length, either:\n\nLPAD(): add characters on the left hand.\nRPAD(): add characters on the right hand.\n\nExample: the following adds leading 0s to emplid Before any update to emp_id:\n\nSELECT emp_id, emp_name\nFROM string_sample\nORDER BY emp_id\n\n\n5 records\n\n\nemp_id\nemp_name\n\n\n\n\n1\nLizbeth Darien\n\n\n17\nLance Pinos-Potter\n\n\n2\nDarnell O’Sullivan\n\n\n20\nJean Paul Renard\n\n\n3\nAlisha von Strump\n\n\n\n\n\nAfter padding 0s added to emp_id:\n\nSELECT LPAD(emp_id, 2, '0') AS emp_id, emp_name\nFROM string_sample\nORDER BY emp_id\n\n\n5 records\n\n\nemp_id\nemp_name\n\n\n\n\n01\nLizbeth Darien\n\n\n02\nDarnell O’Sullivan\n\n\n03\nAlisha von Strump\n\n\n17\nLance Pinos-Potter\n\n\n20\nJean Paul Renard\n\n\n\n\n\nIf adding 0s to the right side\n\nSELECT RPAD(emp_id, 3, '0') AS emp_id, emp_name\nFROM string_sample\nORDER BY emp_id\n\n\n5 records\n\n\nemp_id\nemp_name\n\n\n\n\n100\nLizbeth Darien\n\n\n170\nLance Pinos-Potter\n\n\n200\nDarnell O’Sullivan\n\n\n200\nJean Paul Renard\n\n\n300\nAlisha von Strump\n\n\n\n\n\n\n\nLOWER/UPPER\nLOWER(): Returns the string str with all characters changed to lowercase.\nUPPER(): Returns the string str with all characters changed to uppercase\n\nSELECT emp_name, \n  LOWER(emp_name) AS lowercase,\n  UPPER(emp_name) AS uppercase\nFROM string_sample\n\n\n5 records\n\n\nemp_name\nlowercase\nuppercase\n\n\n\n\nLizbeth Darien\nlizbeth darien\nLIZBETH DARIEN\n\n\nDarnell O’Sullivan\ndarnell o’sullivan\nDARNELL O’SULLIVAN\n\n\nLance Pinos-Potter\nlance pinos-potter\nLANCE PINOS-POTTER\n\n\nJean Paul Renard\njean paul renard\nJEAN PAUL RENARD\n\n\nAlisha von Strump\nalisha von strump\nALISHA VON STRUMP\n\n\n\n\n\n\n\nREPLACE\nREPLACE(): Replace occurrences of a specified string.\n\nSELECT emp_name,\n  REPLACE(emp_name, ' ', ' &lt;=&gt; ') AS new_name\nFROM string_sample\n\n\n5 records\n\n\nemp_name\nnew_name\n\n\n\n\nLizbeth Darien\nLizbeth &lt;=&gt; Darien\n\n\nDarnell O’Sullivan\nDarnell &lt;=&gt; O’Sullivan\n\n\nLance Pinos-Potter\nLance &lt;=&gt; Pinos-Potter\n\n\nJean Paul Renard\nJean &lt;=&gt; Paul &lt;=&gt; Renard\n\n\nAlisha von Strump\nAlisha &lt;=&gt; von &lt;=&gt; Strump\n\n\n\n\n\n\n\nREGEXP_REPLACE\nREGEXP_REPLACE(): Similar as replace, but use regex to match and identify the part to replace.\nHere is a wild example: we are replacing the first match of any letter with that symbol ’ &lt;=&gt; ’.\n\nSELECT emp_name,\n  REGEXP_REPLACE(emp_name, '^\\w', ' &lt;=&gt; ') AS new_name\nFROM string_sample\n\n\n5 records\n\n\nemp_name\nnew_name\n\n\n\n\nLizbeth Darien\nLizbeth Darien\n\n\nDarnell O’Sullivan\nDarnell O’Sullivan\n\n\nLance Pinos-Potter\nLance Pinos-Potter\n\n\nJean Paul Renard\nJean Paul Renard\n\n\nAlisha von Strump\nAlisha von Strump\n\n\n\n\n\n\n\nCONCAT\nCONCAT(): Glue all argument strings together as 1 string.\nCONCAT_WS: Glue all argument strings With Separators.\n\nSELECT emp_name,\n    SUBSTRING_INDEX(emp_name, ' ', 1) AS first_name,\n    SUBSTRING_INDEX(emp_name, ' ', -1) AS last_name,\n    CONCAT_WS(', ',\n      SUBSTRING_INDEX(emp_name, ' ', -1),\n      SUBSTRING_INDEX(emp_name, ' ', 1)) AS new_name,\n    SUBSTRING(SUBSTRING_INDEX(emp_name, ' ', 1), 1, 1) AS initial_first_name,\n    SUBSTRING(SUBSTRING_INDEX(emp_name, ' ', -1), 1, 1) AS initial_last_name,\n    CONCAT(\n      SUBSTRING(SUBSTRING_INDEX(emp_name, ' ', 1), 1, 1), \n      SUBSTRING(SUBSTRING_INDEX(emp_name, ' ', -1), 1, 1)) AS initial\nFROM string_sample\n\n\n5 records\n\n\n\n\n\n\n\n\n\n\n\nemp_name\nfirst_name\nlast_name\nnew_name\ninitial_first_name\ninitial_last_name\ninitial\n\n\n\n\nLizbeth Darien\nLizbeth\nDarien\nDarien, Lizbeth\nL\nD\nLD\n\n\nDarnell O’Sullivan\nDarnell\nO’Sullivan\nO’Sullivan, Darnell\nD\nO\nDO\n\n\nLance Pinos-Potter\nLance\nPinos-Potter\nPinos-Potter, Lance\nL\nP\nLP\n\n\nJean Paul Renard\nJean\nRenard\nRenard, Jean\nJ\nR\nJR\n\n\nAlisha von Strump\nAlisha\nStrump\nStrump, Alisha\nA\nS\nAS",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with Character Values</span>"
    ]
  },
  {
    "objectID": "MySQL_9_Working_with_Character_Values.html#string-search",
    "href": "MySQL_9_Working_with_Character_Values.html#string-search",
    "title": "7  Working with Character Values",
    "section": "7.6 String Search",
    "text": "7.6 String Search\n\nPartial Match (LIKE)\n Source\nExample: return all employee names that has letter b or p:\n\nSELECT emp_name\nFROM string_sample\nWHERE emp_name LIKE '%b%' OR emp_name LIKE '%p%'\n\n\n4 records\n\n\nemp_name\n\n\n\n\nLizbeth Darien\n\n\nLance Pinos-Potter\n\n\nJean Paul Renard\n\n\nAlisha von Strump\n\n\n\n\n\nIf you want to enable case sensitive search:\n\nSELECT emp_name\nFROM string_sample\nWHERE emp_name LIKE '%b%' OR emp_name LIKE BINARY '%p%'\n\n\n2 records\n\n\nemp_name\n\n\n\n\nLizbeth Darien\n\n\nAlisha von Strump\n\n\n\n\n\n\n\nLOCATE\nLOCATE(): Return the position of the first occurrence of substring\n\nSELECT emp_name,\n    LOCATE(' ', emp_name) AS first_space,\n    LOCATE(' ', emp_name, LOCATE(' ', emp_name) + 1) AS second_space\nFROM string_sample\n\n\n5 records\n\n\nemp_name\nfirst_space\nsecond_space\n\n\n\n\nLizbeth Darien\n8\n0\n\n\nDarnell O’Sullivan\n8\n0\n\n\nLance Pinos-Potter\n6\n0\n\n\nJean Paul Renard\n5\n10\n\n\nAlisha von Strump\n7\n11\n\n\n\n\n\n\n\nREGEXP_LIKE\nYou can also subset values based on regex pattern matching.\nFor example, let’s find out all of the table names with pattern like “COLUMNS_” on the server.\n\nSELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME\nFROM information_schema.COLUMNS\nWHERE REGEXP_LIKE(TABLE_NAME, '^COLUMNS_')\n\n\n13 records\n\n\n\n\n\n\n\n\nTABLE_CATALOG\nTABLE_SCHEMA\nTABLE_NAME\nCOLUMN_NAME\n\n\n\n\ndef\ninformation_schema\nCOLUMNS_EXTENSIONS\nTABLE_CATALOG\n\n\ndef\ninformation_schema\nCOLUMNS_EXTENSIONS\nTABLE_SCHEMA\n\n\ndef\ninformation_schema\nCOLUMNS_EXTENSIONS\nTABLE_NAME\n\n\ndef\ninformation_schema\nCOLUMNS_EXTENSIONS\nCOLUMN_NAME\n\n\ndef\ninformation_schema\nCOLUMNS_EXTENSIONS\nENGINE_ATTRIBUTE\n\n\ndef\ninformation_schema\nCOLUMNS_EXTENSIONS\nSECONDARY_ENGINE_ATTRIBUTE\n\n\ndef\nmysql\ncolumns_priv\nHost\n\n\ndef\nmysql\ncolumns_priv\nDb\n\n\ndef\nmysql\ncolumns_priv\nUser\n\n\ndef\nmysql\ncolumns_priv\nTable_name\n\n\ndef\nmysql\ncolumns_priv\nColumn_name\n\n\ndef\nmysql\ncolumns_priv\nTimestamp\n\n\ndef\nmysql\ncolumns_priv\nColumn_priv\n\n\n\n\n\nNext example, let’s find out all of the column names that has word date at the end.\n\nSELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME\nFROM information_schema.COLUMNS\nWHERE TABLE_NAME = 'invoices' AND REGEXP_LIKE(COLUMN_NAME, 'date$')\n\n\n6 records\n\n\nTABLE_CATALOG\nTABLE_SCHEMA\nTABLE_NAME\nCOLUMN_NAME\n\n\n\n\ndef\nap\ninvoices\ninvoice_date\n\n\ndef\nap\ninvoices\ninvoice_due_date\n\n\ndef\nap\ninvoices\npayment_date\n\n\ndef\nap1\ninvoices\ninvoice_date\n\n\ndef\nap1\ninvoices\ninvoice_due_date\n\n\ndef\nap1\ninvoices\npayment_date\n\n\n\n\n\nLast example, let’s find out the position of the word “date” for all of the column names that has word date at the end.\n\nSELECT TABLE_CATALOG,\n  TABLE_SCHEMA,\n  TABLE_NAME,\n  COLUMN_NAME,\n  REGEXP_INSTR(COLUMN_NAME, 'date') AS REGEXP_INSTR\nFROM information_schema.COLUMNS\nWHERE TABLE_NAME = 'invoices'\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\nTABLE_CATALOG\nTABLE_SCHEMA\nTABLE_NAME\nCOLUMN_NAME\nREGEXP_INSTR\n\n\n\n\ndef\nap\ninvoices\ninvoice_id\n0\n\n\ndef\nap\ninvoices\nvendor_id\n0\n\n\ndef\nap\ninvoices\ninvoice_number\n0\n\n\ndef\nap\ninvoices\ninvoice_date\n9\n\n\ndef\nap\ninvoices\ninvoice_total\n0\n\n\ndef\nap\ninvoices\npayment_total\n0\n\n\ndef\nap\ninvoices\ncredit_total\n0\n\n\ndef\nap\ninvoices\nterms_id\n0\n\n\ndef\nap\ninvoices\ninvoice_due_date\n13\n\n\ndef\nap\ninvoices\npayment_date\n9\n\n\ndef\nap1\ninvoices\ninvoice_id\n0\n\n\ndef\nap1\ninvoices\nvendor_id\n0\n\n\ndef\nap1\ninvoices\ninvoice_number\n0\n\n\ndef\nap1\ninvoices\ninvoice_date\n9\n\n\ndef\nap1\ninvoices\ninvoice_total\n0",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Working with Character Values</span>"
    ]
  },
  {
    "objectID": "MySQL_10_Working_with_Time.html",
    "href": "MySQL_10_Working_with_Time.html",
    "title": "8  Working with Time",
    "section": "",
    "text": "8.1 Reference\nDefault database in this chapter is “ap”.\nOther databases included in the simulation MySQL server:",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Working with Time</span>"
    ]
  },
  {
    "objectID": "MySQL_10_Working_with_Time.html#reference",
    "href": "MySQL_10_Working_with_Time.html#reference",
    "title": "8  Working with Time",
    "section": "",
    "text": "om\nex",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Working with Time</span>"
    ]
  },
  {
    "objectID": "MySQL_10_Working_with_Time.html#data-type",
    "href": "MySQL_10_Working_with_Time.html#data-type",
    "title": "8  Working with Time",
    "section": "8.2 Data Type",
    "text": "8.2 Data Type\n5 Different temporal data types:\n\nTime (2:22:37)\nDateTime (2028-10-15 2:22:37)\nTimeStamp (2028-10-15 2:22:37 UTC)\nDate (2028-10-15)\nYear (2028)\n\nNote: Value stored in the database and displayed value are 2 different things.\nFor example, all of the following displayed dates have the same stored values in the database:\n\n‘2028-08-15’\n‘2028-8-15’\n‘28-8-15’\n‘20280815’\n\nAll of these stored as 2028-8-15 in the database",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Working with Time</span>"
    ]
  },
  {
    "objectID": "MySQL_10_Working_with_Time.html#working-with-time",
    "href": "MySQL_10_Working_with_Time.html#working-with-time",
    "title": "8  Working with Time",
    "section": "8.3 Working with Time",
    "text": "8.3 Working with Time\n\nGet Current Date and Time\nFor more information about UTC (Coordinated Universal Time).\nUTC\n\nSELECT \n  NOW(),\n  SYSDATE(),\n  CURRENT_TIMESTAMP(),\n  CURDATE(),\n  CURRENT_DATE(),\n  CURTIME(),\n  CURRENT_TIME(),\n  UTC_DATE(),\n  UTC_TIME()\n\n\n1 records\n\n\n\n\n\n\n\n\n\n\n\n\n\nNOW()\nSYSDATE()\nCURRENT_TIMESTAMP()\nCURDATE()\nCURRENT_DATE()\nCURTIME()\nCURRENT_TIME()\nUTC_DATE()\nUTC_TIME()\n\n\n\n\n2024-11-09 13:15:16\n2024-11-09 13:15:16\n2024-11-09 13:15:16\n2024-11-09\n2024-11-09\n13:15:16\n13:15:16\n2024-11-09\n18:15:16",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Working with Time</span>"
    ]
  },
  {
    "objectID": "MySQL_10_Working_with_Time.html#extract-time-component",
    "href": "MySQL_10_Working_with_Time.html#extract-time-component",
    "title": "8  Working with Time",
    "section": "8.4 Extract Time Component",
    "text": "8.4 Extract Time Component\n\nSELECT\n  invoice_due_date,\n  DAYOFMONTH(invoice_due_date),\n  MONTH(invoice_due_date),\n  YEAR(invoice_due_date),\n  HOUR(invoice_due_date),\n  MINUTE(invoice_due_date),\n  SECOND(invoice_due_date),\n  DAYOFWEEK(invoice_due_date),\n  QUARTER(invoice_due_date),\n  DAYOFYEAR(invoice_due_date),\n  WEEK(invoice_due_date),\n  LAST_DAY(invoice_due_date),\n  DAYNAME(invoice_due_date),\n  MONTHNAME(invoice_due_date)\nFROM invoices\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_due_date\nDAYOFMONTH(invoice_due_date)\nMONTH(invoice_due_date)\nYEAR(invoice_due_date)\nHOUR(invoice_due_date)\nMINUTE(invoice_due_date)\nSECOND(invoice_due_date)\nDAYOFWEEK(invoice_due_date)\nQUARTER(invoice_due_date)\nDAYOFYEAR(invoice_due_date)\nWEEK(invoice_due_date)\nLAST_DAY(invoice_due_date)\nDAYNAME(invoice_due_date)\nMONTHNAME(invoice_due_date)\n\n\n\n\n2022-05-08\n8\n5\n2022\n0\n0\n0\n1\n2\n128\n19\n2022-05-31\nSunday\nMay\n\n\n2022-05-10\n10\n5\n2022\n0\n0\n0\n3\n2\n130\n19\n2022-05-31\nTuesday\nMay\n\n\n2022-05-13\n13\n5\n2022\n0\n0\n0\n6\n2\n133\n19\n2022-05-31\nFriday\nMay\n\n\n2022-05-16\n16\n5\n2022\n0\n0\n0\n2\n2\n136\n20\n2022-05-31\nMonday\nMay\n\n\n2022-05-16\n16\n5\n2022\n0\n0\n0\n2\n2\n136\n20\n2022-05-31\nMonday\nMay\n\n\n2022-05-16\n16\n5\n2022\n0\n0\n0\n2\n2\n136\n20\n2022-05-31\nMonday\nMay\n\n\n2022-05-21\n21\n5\n2022\n0\n0\n0\n7\n2\n141\n20\n2022-05-31\nSaturday\nMay\n\n\n2022-05-04\n4\n5\n2022\n0\n0\n0\n4\n2\n124\n18\n2022-05-31\nWednesday\nMay\n\n\n2022-05-24\n24\n5\n2022\n0\n0\n0\n3\n2\n144\n21\n2022-05-31\nTuesday\nMay\n\n\n2022-05-24\n24\n5\n2022\n0\n0\n0\n3\n2\n144\n21\n2022-05-31\nTuesday\nMay\n\n\n2022-05-25\n25\n5\n2022\n0\n0\n0\n4\n2\n145\n21\n2022-05-31\nWednesday\nMay\n\n\n2022-05-16\n16\n5\n2022\n0\n0\n0\n2\n2\n136\n20\n2022-05-31\nMonday\nMay\n\n\n2022-05-20\n20\n5\n2022\n0\n0\n0\n6\n2\n140\n20\n2022-05-31\nFriday\nMay\n\n\n2022-06-10\n10\n6\n2022\n0\n0\n0\n6\n2\n161\n23\n2022-06-30\nFriday\nJune\n\n\n2022-06-02\n2\n6\n2022\n0\n0\n0\n5\n2\n153\n22\n2022-06-30\nThursday\nJune\n\n\n\n\n\n\nFormat Date and Time\nFor all different time formatting details in MySQL, see Oracle MySQL documentation .\n\nSELECT\n  invoice_due_date,\n  DATE_FORMAT(invoice_due_date, '%m') AS MONTH_ONLY,\n  DATE_FORMAT(invoice_due_date, '%M') AS MONTH_NAME,\n  DATE_FORMAT(invoice_due_date, '%b-%d-%Y') AS MMM_DD_YYYY\nFROM invoices\n\n\nDisplaying records 1 - 15\n\n\ninvoice_due_date\nMONTH_ONLY\nMONTH_NAME\nMMM_DD_YYYY\n\n\n\n\n2022-05-08\n05\nMay\nMay-08-2022\n\n\n2022-05-10\n05\nMay\nMay-10-2022\n\n\n2022-05-13\n05\nMay\nMay-13-2022\n\n\n2022-05-16\n05\nMay\nMay-16-2022\n\n\n2022-05-16\n05\nMay\nMay-16-2022\n\n\n2022-05-16\n05\nMay\nMay-16-2022\n\n\n2022-05-21\n05\nMay\nMay-21-2022\n\n\n2022-05-04\n05\nMay\nMay-04-2022\n\n\n2022-05-24\n05\nMay\nMay-24-2022\n\n\n2022-05-24\n05\nMay\nMay-24-2022\n\n\n2022-05-25\n05\nMay\nMay-25-2022\n\n\n2022-05-16\n05\nMay\nMay-16-2022\n\n\n2022-05-20\n05\nMay\nMay-20-2022\n\n\n2022-06-10\n06\nJune\nJun-10-2022\n\n\n2022-06-02\n06\nJune\nJun-02-2022\n\n\n\n\n\n\n\nDate Time Calculation\n\nSELECT\n  invoice_due_date,\n  payment_date,\n  DATE_ADD(invoice_due_date,INTERVAL 9 MONTH),\n  DATE_SUB(invoice_due_date,INTERVAL 5 DAY),\n  DATEDIFF(invoice_due_date, payment_date),\n  -- very useful to ensure the calculation results in days\n  -- by default, it is calculating number of days passed by between the specified date and year 0\n  TO_DAYS(invoice_due_date)\nFROM invoices\nORDER BY invoice_due_date\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\n\ninvoice_due_date\npayment_date\nDATE_ADD(invoice_due_date,INTERVAL 9 MONTH)\nDATE_SUB(invoice_due_date,INTERVAL 5 DAY)\nDATEDIFF(invoice_due_date, payment_date)\nTO_DAYS(invoice_due_date)\n\n\n\n\n2022-05-04\n2022-05-01\n2023-02-04\n2022-04-29\n3\n738644\n\n\n2022-05-08\n2022-05-07\n2023-02-08\n2022-05-03\n1\n738648\n\n\n2022-05-10\n2022-05-14\n2023-02-10\n2022-05-05\n-4\n738650\n\n\n2022-05-13\n2022-05-09\n2023-02-13\n2022-05-08\n4\n738653\n\n\n2022-05-16\n2022-05-12\n2023-02-16\n2022-05-11\n4\n738656\n\n\n2022-05-16\n2022-05-11\n2023-02-16\n2022-05-11\n5\n738656\n\n\n2022-05-16\n2022-05-21\n2023-02-16\n2022-05-11\n-5\n738656\n\n\n2022-05-16\n2022-05-13\n2023-02-16\n2022-05-11\n3\n738656\n\n\n2022-05-17\n2022-05-19\n2023-02-17\n2022-05-12\n-2\n738657\n\n\n2022-05-20\n2022-05-23\n2023-02-20\n2022-05-15\n-3\n738660\n\n\n2022-05-21\n2022-05-22\n2023-02-21\n2022-05-16\n-1\n738661\n\n\n2022-05-23\n2022-05-22\n2023-02-23\n2022-05-18\n1\n738663\n\n\n2022-05-24\n2022-05-21\n2023-02-24\n2022-05-19\n3\n738664\n\n\n2022-05-24\n2022-05-22\n2023-02-24\n2022-05-19\n2\n738664\n\n\n2022-05-25\n2022-05-20\n2023-02-25\n2022-05-20\n5\n738665\n\n\n\n\n\nTIME_TO_SEC(): Returns the time argument, converted to seconds. Returns NULL if time is NULL.\n\nSELECT \n  NOW(),\n  HOUR(NOW()) * 3600 + MINUTE(NOW()) * 60 + SECOND(NOW()),\n  -- very useful to ensure the calculation results in seconds\n  TIME_TO_SEC(NOW())\n\n\n1 records\n\n\n\n\n\n\n\nNOW()\nHOUR(NOW()) * 3600 + MINUTE(NOW()) * 60 + SECOND(NOW())\nTIME_TO_SEC(NOW())\n\n\n\n\n2024-11-09 13:15:17\n47717\n47717\n\n\n\n\n\n\n\nSearch Date and Time\nGeneral process:\n\nSpecify conditions in WHERE clause;\nConvert/Extract date/time field to a particular format that suits your search need;\nUse convered/extracted values to search for targeted date/time range.\n\nFor example, we would like to search for all invoices with invoice date during May 2022.\n\nSELECT * \nFROM invoices\nWHERE invoice_date BETWEEN '2022-05-01' AND '2022-05-31'\nORDER BY invoice_date DESC\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n41\n123\n963253255\n2022-05-31\n53.75\n53.75\n0\n3\n2022-06-30\n2022-06-27\n\n\n42\n123\n94007069\n2022-05-31\n400.00\n400.00\n0\n3\n2022-06-30\n2022-07-01\n\n\n40\n121\n97/503\n2022-05-30\n639.77\n639.77\n0\n3\n2022-06-29\n2022-06-25\n\n\n39\n110\n0-2058\n2022-05-28\n37966.19\n37966.19\n0\n3\n2022-06-27\n2022-06-30\n\n\n38\n123\n963253272\n2022-05-26\n61.50\n61.50\n0\n3\n2022-06-25\n2022-06-30\n\n\n35\n107\nRTR-72-3662-X\n2022-05-25\n1600.00\n1600.00\n0\n4\n2022-07-04\n2022-07-09\n\n\n36\n121\n97/465\n2022-05-25\n565.15\n565.15\n0\n3\n2022-06-24\n2022-06-24\n\n\n37\n123\n963253260\n2022-05-25\n36.00\n36.00\n0\n3\n2022-06-24\n2022-06-26\n\n\n33\n105\n94007005\n2022-05-23\n220.00\n220.00\n0\n3\n2022-06-22\n2022-06-26\n\n\n34\n123\n963253232\n2022-05-23\n127.75\n127.75\n0\n3\n2022-06-22\n2022-06-18\n\n\n31\n104\nP02-3772\n2022-05-21\n7125.34\n7125.34\n0\n3\n2022-06-20\n2022-06-24\n\n\n32\n121\n97/486\n2022-05-21\n953.10\n953.10\n0\n3\n2022-06-20\n2022-06-22\n\n\n30\n123\n1-200-5164\n2022-05-20\n63.40\n63.40\n0\n3\n2022-06-19\n2022-06-24\n\n\n29\n108\n121897\n2022-05-19\n450.00\n450.00\n0\n4\n2022-06-28\n2022-07-03\n\n\n28\n123\n963253263\n2022-05-16\n109.50\n109.50\n0\n3\n2022-06-15\n2022-06-10\n\n\n\n\n\nOr, alternatively:\n\nSELECT * \nFROM invoices\nWHERE MONTH(invoice_date) = 5 AND YEAR(invoice_date) = 2022\nORDER BY invoice_date DESC\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n41\n123\n963253255\n2022-05-31\n53.75\n53.75\n0\n3\n2022-06-30\n2022-06-27\n\n\n42\n123\n94007069\n2022-05-31\n400.00\n400.00\n0\n3\n2022-06-30\n2022-07-01\n\n\n40\n121\n97/503\n2022-05-30\n639.77\n639.77\n0\n3\n2022-06-29\n2022-06-25\n\n\n39\n110\n0-2058\n2022-05-28\n37966.19\n37966.19\n0\n3\n2022-06-27\n2022-06-30\n\n\n38\n123\n963253272\n2022-05-26\n61.50\n61.50\n0\n3\n2022-06-25\n2022-06-30\n\n\n35\n107\nRTR-72-3662-X\n2022-05-25\n1600.00\n1600.00\n0\n4\n2022-07-04\n2022-07-09\n\n\n36\n121\n97/465\n2022-05-25\n565.15\n565.15\n0\n3\n2022-06-24\n2022-06-24\n\n\n37\n123\n963253260\n2022-05-25\n36.00\n36.00\n0\n3\n2022-06-24\n2022-06-26\n\n\n33\n105\n94007005\n2022-05-23\n220.00\n220.00\n0\n3\n2022-06-22\n2022-06-26\n\n\n34\n123\n963253232\n2022-05-23\n127.75\n127.75\n0\n3\n2022-06-22\n2022-06-18\n\n\n31\n104\nP02-3772\n2022-05-21\n7125.34\n7125.34\n0\n3\n2022-06-20\n2022-06-24\n\n\n32\n121\n97/486\n2022-05-21\n953.10\n953.10\n0\n3\n2022-06-20\n2022-06-22\n\n\n30\n123\n1-200-5164\n2022-05-20\n63.40\n63.40\n0\n3\n2022-06-19\n2022-06-24\n\n\n29\n108\n121897\n2022-05-19\n450.00\n450.00\n0\n4\n2022-06-28\n2022-07-03\n\n\n28\n123\n963253263\n2022-05-16\n109.50\n109.50\n0\n3\n2022-06-15\n2022-06-10",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Working with Time</span>"
    ]
  },
  {
    "objectID": "MySQL_11_Condition_Control.html",
    "href": "MySQL_11_Condition_Control.html",
    "title": "9  Condition Control",
    "section": "",
    "text": "9.1 Reference\nDefault database in this chapter is “ap”.\nOther databases included in the simulation MySQL server:",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Condition Control</span>"
    ]
  },
  {
    "objectID": "MySQL_11_Condition_Control.html#reference",
    "href": "MySQL_11_Condition_Control.html#reference",
    "title": "9  Condition Control",
    "section": "",
    "text": "om\nex",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Condition Control</span>"
    ]
  },
  {
    "objectID": "MySQL_11_Condition_Control.html#conditions",
    "href": "MySQL_11_Condition_Control.html#conditions",
    "title": "9  Condition Control",
    "section": "9.2 Conditions",
    "text": "9.2 Conditions\nQuite often, you would like different things happen based on different values/when some logics return TRUE/FALSE. Each of these comparison/logic test is called a condition. After each condition, you need to specify what behaviour needs to happen.\nTake a look at the following example, when we need to create a friendly label for different repayment terms for invoices.\n\nCASE…WHEN…THEN…END\n\nSELECT invoice_number, terms_id,\n    CASE terms_id\n        WHEN 1 THEN 'Net due 10 days'\n        WHEN 2 THEN 'Net due 20 days'\n        WHEN 3 THEN 'Net due 30 days'\n        WHEN 4 THEN 'Net due 60 days'\n        WHEN 5 THEN 'Net due 90 days'\n    END AS terms\nFROM invoices\n\n\nDisplaying records 1 - 15\n\n\ninvoice_number\nterms_id\nterms\n\n\n\n\n989319-457\n3\nNet due 30 days\n\n\n263253241\n3\nNet due 30 days\n\n\n963253234\n3\nNet due 30 days\n\n\n2-000-2993\n3\nNet due 30 days\n\n\n963253251\n3\nNet due 30 days\n\n\n963253261\n3\nNet due 30 days\n\n\n963253237\n3\nNet due 30 days\n\n\n125520-1\n1\nNet due 10 days\n\n\n97/488\n3\nNet due 30 days\n\n\n263253250\n3\nNet due 30 days\n\n\n963253262\n3\nNet due 30 days\n\n\nI77271-O01\n2\nNet due 20 days\n\n\n111-92R-10096\n2\nNet due 20 days\n\n\n25022117\n4\nNet due 60 days\n\n\nP02-88D77S7\n3\nNet due 30 days\n\n\n\n\n\nAnother example, we will create a custom payment_owned column by harnessing information from different types of payment statuses among the vendors:\n\nSELECT invoice_id,\n  vendor_id,\n  invoice_due_date,\n  payment_date,\n  invoice_total,\n  payment_total,\n  credit_total,\n  CASE  \n      WHEN payment_date &gt; invoice_due_date THEN invoice_total - payment_total - credit_total\n      WHEN invoice_total - payment_total - credit_total = 0 THEN payment_total\n      WHEN invoice_total - payment_total - credit_total &lt; 0 THEN invoice_total - payment_total - credit_total\n      ELSE 0\n      END AS payment_owed\nFROM invoices\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_due_date\npayment_date\ninvoice_total\npayment_total\ncredit_total\npayment_owed\n\n\n\n\n1\n122\n2022-05-08\n2022-05-07\n3813.33\n3813.33\n0\n3813.33\n\n\n2\n123\n2022-05-10\n2022-05-14\n40.20\n40.20\n0\n0.00\n\n\n3\n123\n2022-05-13\n2022-05-09\n138.75\n138.75\n0\n138.75\n\n\n4\n123\n2022-05-16\n2022-05-12\n144.70\n144.70\n0\n144.70\n\n\n5\n123\n2022-05-16\n2022-05-11\n15.50\n15.50\n0\n15.50\n\n\n6\n123\n2022-05-16\n2022-05-21\n42.75\n42.75\n0\n0.00\n\n\n7\n123\n2022-05-21\n2022-05-22\n172.50\n172.50\n0\n0.00\n\n\n8\n89\n2022-05-04\n2022-05-01\n95.00\n95.00\n0\n95.00\n\n\n9\n121\n2022-05-24\n2022-05-21\n601.95\n601.95\n0\n601.95\n\n\n10\n123\n2022-05-24\n2022-05-22\n42.67\n42.67\n0\n42.67\n\n\n11\n123\n2022-05-25\n2022-05-20\n42.50\n42.50\n0\n42.50\n\n\n12\n96\n2022-05-16\n2022-05-13\n662.00\n662.00\n0\n662.00\n\n\n13\n95\n2022-05-20\n2022-05-23\n16.33\n16.33\n0\n0.00\n\n\n14\n115\n2022-06-10\n2022-06-10\n6.00\n6.00\n0\n6.00\n\n\n15\n48\n2022-06-02\n2022-05-30\n856.92\n856.92\n0\n856.92\n\n\n\n\n\nLast example, Case when statement can be directly embedded into summary query. This can make conditional summary query so much simpler without involving any Common Table Expressions or subqueries.\n\nSELECT vendor_id,\n  SUM(CASE  \n      WHEN payment_date &gt; invoice_due_date THEN invoice_total - payment_total - credit_total\n      WHEN invoice_total - payment_total - credit_total = 0 THEN payment_total\n      WHEN invoice_total - payment_total - credit_total &lt; 0 THEN invoice_total - payment_total - credit_total\n      ELSE 0\n      END) AS total_payment_owed\nFROM invoices\nGROUP BY vendor_id\n\n\nDisplaying records 1 - 15\n\n\nvendor_id\ntotal_payment_owed\n\n\n\n\n34\n0.00\n\n\n37\n116.00\n\n\n48\n856.92\n\n\n72\n21842.00\n\n\n80\n0.00\n\n\n81\n936.93\n\n\n82\n0.00\n\n\n83\n1575.00\n\n\n86\n2433.00\n\n\n88\n0.00\n\n\n89\n95.00\n\n\n90\n356.48\n\n\n94\n0.00\n\n\n95\n39.77\n\n\n96\n662.00\n\n\n\n\n\n\n\nIF\nThis is quite similar to the Microsoft Excel IF function. IF is less versatile than CASE WHEN statement because it only examines 1 set of logics. However, IF is effective to write.\nHere, we create flag column for vendor from City of Fresno:\n\nSELECT vendor_name, \n  IF(vendor_city = 'Fresno', 'Yes', 'No') AS is_city_fresno\nFROM vendors\n\n\nDisplaying records 1 - 15\n\n\nvendor_name\nis_city_fresno\n\n\n\n\nUS Postal Service\nNo\n\n\nNational Information Data Ctr\nNo\n\n\nRegister of Copyrights\nNo\n\n\nJobtrak\nNo\n\n\nNewbrige Book Clubs\nNo\n\n\nCalifornia Chamber Of Commerce\nNo\n\n\nTowne Advertiser’s Mailing Svcs\nNo\n\n\nBFI Industries\nYes\n\n\nPacific Gas & Electric\nNo\n\n\nRobbins Mobile Lock And Key\nYes\n\n\nBill Marvin Electric Inc\nYes\n\n\nCity Of Fresno\nYes\n\n\nGolden Eagle Insurance Co\nNo\n\n\nExpedata Inc\nYes\n\n\nASC Signs\nYes\n\n\n\n\n\n\n\nIFNULL\nThe following allows to replace NULL values if there are any in the field. Very useful before you use the field in WHERE or HAVING, because they exclude NULL values when comparing.\nExample, we want to create a label for all vendors that haven’t paid us.\nFirst, let’s see the ones without any payment date just yet:\n\nSELECT *\nFROM invoices\nWHERE payment_date IS NULL\nLIMIT 15\n\n\n11 records\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninvoice_id\nvendor_id\ninvoice_number\ninvoice_date\ninvoice_total\npayment_total\ncredit_total\nterms_id\ninvoice_due_date\npayment_date\n\n\n\n\n89\n72\n39104\n2022-07-10\n85.31\n0\n0\n3\n2022-08-09\nNA\n\n\n94\n123\n963253264\n2022-07-18\n52.25\n0\n0\n3\n2022-08-17\nNA\n\n\n98\n83\n31361833\n2022-07-21\n579.42\n0\n0\n2\n2022-08-10\nNA\n\n\n99\n123\n263253268\n2022-07-21\n59.97\n0\n0\n3\n2022-08-20\nNA\n\n\n100\n123\n263253270\n2022-07-22\n67.92\n0\n0\n3\n2022-08-21\nNA\n\n\n101\n123\n263253273\n2022-07-22\n30.75\n0\n0\n3\n2022-08-21\nNA\n\n\n102\n110\nP-0608\n2022-07-23\n20551.18\n0\n1200\n3\n2022-08-22\nNA\n\n\n105\n106\n9982771\n2022-07-24\n503.20\n0\n0\n3\n2022-08-23\nNA\n\n\n110\n80\n134116\n2022-07-28\n90.36\n0\n0\n2\n2022-08-17\nNA\n\n\n112\n110\n0-2436\n2022-07-31\n10976.06\n0\n0\n3\n2022-08-30\nNA\n\n\n113\n37\n547480102\n2022-08-01\n224.00\n0\n0\n3\n2022-08-31\nNA\n\n\n\n\n\nLet’s see the result of our SQL application.\n\nSELECT payment_date,\n       IFNULL(payment_date, 'No Payment') AS new_date\nFROM invoices\nORDER BY payment_date\nLIMIT 15\n\n\nDisplaying records 1 - 15\n\n\npayment_date\nnew_date\n\n\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\n2022-05-01\n2022-05-01\n\n\n2022-05-07\n2022-05-07\n\n\n2022-05-09\n2022-05-09\n\n\n2022-05-11\n2022-05-11\n\n\n\n\n\n\n\nCOALESCE\nCOALESCE(): Returns the first non-NULL value in the list, or NULL if there are no non-NULL values.\nIFNULL vs COALESCE:\nThe main difference between the two is that IFNULL function takes two arguments and returns the first one if it’s not NULL or the second if the first one is NULL.\nCOALESCE function can take two or more parameters and returns the first non-NULL parameter, or NULL if all parameters are null.\nThe following example has the same effect as IFNULL example above.\n\nSELECT payment_date,\n  COALESCE(payment_date, 'No Payment') AS new_date\nFROM invoices\nWHERE payment_date IS NULL\n\n\n11 records\n\n\npayment_date\nnew_date\n\n\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\nNA\nNo Payment\n\n\n\n\n\nThe following example fully demonstrate how COALESCE works when multiple conditions are passed in:\n\nSELECT vendors.vendor_id,\n  vendor_phone,\n  vendor_name,\n  vendor_state,\n  invoice_id, \n  invoice_date,\n  invoice_total,\n  COALESCE(invoice_id, vendor_phone, invoice_total, 'No invoice', 'No vendor phone number','No invoice total') AS NEW_COL\nFROM vendors LEFT JOIN invoices ON invoices.vendor_id = vendors.vendor_id\n\n\nDisplaying records 1 - 15\n\n\n\n\n\n\n\n\n\n\n\n\nvendor_id\nvendor_phone\nvendor_name\nvendor_state\ninvoice_id\ninvoice_date\ninvoice_total\nNEW_COL\n\n\n\n\n1\n(800) 555-1205\nUS Postal Service\nWI\nNA\nNA\nNA\n(800) 555-1205\n\n\n2\n(301) 555-8950\nNational Information Data Ctr\nDC\nNA\nNA\nNA\n(301) 555-8950\n\n\n3\nNA\nRegister of Copyrights\nDC\nNA\nNA\nNA\nNo invoice\n\n\n4\n(800) 555-8725\nJobtrak\nCA\nNA\nNA\nNA\n(800) 555-8725\n\n\n5\n(800) 555-9980\nNewbrige Book Clubs\nNJ\nNA\nNA\nNA\n(800) 555-9980\n\n\n6\n(916) 555-6670\nCalifornia Chamber Of Commerce\nCA\nNA\nNA\nNA\n(916) 555-6670\n\n\n7\nNA\nTowne Advertiser’s Mailing Svcs\nCA\nNA\nNA\nNA\nNo invoice\n\n\n8\n(559) 555-1551\nBFI Industries\nCA\nNA\nNA\nNA\n(559) 555-1551\n\n\n9\n(800) 555-6081\nPacific Gas & Electric\nCA\nNA\nNA\nNA\n(800) 555-6081\n\n\n10\n(559) 555-9375\nRobbins Mobile Lock And Key\nCA\nNA\nNA\nNA\n(559) 555-9375\n\n\n11\n(559) 555-5106\nBill Marvin Electric Inc\nCA\nNA\nNA\nNA\n(559) 555-5106\n\n\n12\n(559) 555-9999\nCity Of Fresno\nCA\nNA\nNA\nNA\n(559) 555-9999\n\n\n13\nNA\nGolden Eagle Insurance Co\nCA\nNA\nNA\nNA\nNo invoice\n\n\n14\n(559) 555-9586\nExpedata Inc\nCA\nNA\nNA\nNA\n(559) 555-9586\n\n\n15\nNA\nASC Signs\nCA\nNA\nNA\nNA\nNo invoice",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Condition Control</span>"
    ]
  }
]